{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aaff11af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:40.928734Z",
     "iopub.status.busy": "2024-06-21T05:59:40.928432Z",
     "iopub.status.idle": "2024-06-21T05:59:42.605916Z",
     "shell.execute_reply": "2024-06-21T05:59:42.605175Z"
    },
    "papermill": {
     "duration": 1.697712,
     "end_time": "2024-06-21T05:59:42.608158",
     "exception": false,
     "start_time": "2024-06-21T05:59:40.910446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "81bfa3e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:42.642231Z",
     "iopub.status.busy": "2024-06-21T05:59:42.641858Z",
     "iopub.status.idle": "2024-06-21T05:59:43.055878Z",
     "shell.execute_reply": "2024-06-21T05:59:43.054891Z"
    },
    "papermill": {
     "duration": 0.433497,
     "end_time": "2024-06-21T05:59:43.058235",
     "exception": false,
     "start_time": "2024-06-21T05:59:42.624738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/kagglex/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/kagglex/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f686923b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.092751Z",
     "iopub.status.busy": "2024-06-21T05:59:43.092420Z",
     "iopub.status.idle": "2024-06-21T05:59:43.104955Z",
     "shell.execute_reply": "2024-06-21T05:59:43.103993Z"
    },
    "papermill": {
     "duration": 0.03243,
     "end_time": "2024-06-21T05:59:43.106938",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.074508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#set index to id column\n",
    "train.set_index('id', inplace=True)\n",
    "test.set_index('id', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "df431ddc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.139738Z",
     "iopub.status.busy": "2024-06-21T05:59:43.139470Z",
     "iopub.status.idle": "2024-06-21T05:59:43.156441Z",
     "shell.execute_reply": "2024-06-21T05:59:43.155654Z"
    },
    "papermill": {
     "duration": 0.035755,
     "end_time": "2024-06-21T05:59:43.158594",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.122839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>model</th>\n",
       "      <th>model_year</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>engine</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>clean_title</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ford</td>\n",
       "      <td>F-150 Lariat</td>\n",
       "      <td>2018</td>\n",
       "      <td>74349</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>10-Speed A/T</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>11000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BMW</td>\n",
       "      <td>335 i</td>\n",
       "      <td>2007</td>\n",
       "      <td>80000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>300.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n",
       "      <td>6-Speed M/T</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>8250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jaguar</td>\n",
       "      <td>XF Luxury</td>\n",
       "      <td>2009</td>\n",
       "      <td>91491</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>300.0HP 4.2L 8 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>6-Speed A/T</td>\n",
       "      <td>Purple</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>15000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BMW</td>\n",
       "      <td>X7 xDrive40i</td>\n",
       "      <td>2022</td>\n",
       "      <td>2437</td>\n",
       "      <td>Hybrid</td>\n",
       "      <td>335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n",
       "      <td>Transmission w/Dual Shift Mode</td>\n",
       "      <td>Gray</td>\n",
       "      <td>Brown</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>63500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pontiac</td>\n",
       "      <td>Firebird Base</td>\n",
       "      <td>2001</td>\n",
       "      <td>111000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>200.0HP 3.8L V6 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>A/T</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      brand          model  model_year  milage fuel_type  \\\n",
       "id                                                         \n",
       "0      Ford   F-150 Lariat        2018   74349  Gasoline   \n",
       "1       BMW          335 i        2007   80000  Gasoline   \n",
       "2    Jaguar      XF Luxury        2009   91491  Gasoline   \n",
       "3       BMW   X7 xDrive40i        2022    2437    Hybrid   \n",
       "4   Pontiac  Firebird Base        2001  111000  Gasoline   \n",
       "\n",
       "                                               engine  \\\n",
       "id                                                      \n",
       "0       375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel   \n",
       "1   300.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n",
       "2        300.0HP 4.2L 8 Cylinder Engine Gasoline Fuel   \n",
       "3   335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n",
       "4       200.0HP 3.8L V6 Cylinder Engine Gasoline Fuel   \n",
       "\n",
       "                      transmission ext_col int_col       accident clean_title  \\\n",
       "id                                                                              \n",
       "0                     10-Speed A/T    Blue    Gray  None reported         Yes   \n",
       "1                      6-Speed M/T   Black   Black  None reported         Yes   \n",
       "2                      6-Speed A/T  Purple   Beige  None reported         Yes   \n",
       "3   Transmission w/Dual Shift Mode    Gray   Brown  None reported         Yes   \n",
       "4                              A/T   White   Black  None reported         Yes   \n",
       "\n",
       "    price  \n",
       "id         \n",
       "0   11000  \n",
       "1    8250  \n",
       "2   15000  \n",
       "3   63500  \n",
       "4    7850  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11ddf6b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.192456Z",
     "iopub.status.busy": "2024-06-21T05:59:43.192189Z",
     "iopub.status.idle": "2024-06-21T05:59:43.205677Z",
     "shell.execute_reply": "2024-06-21T05:59:43.204860Z"
    },
    "papermill": {
     "duration": 0.032245,
     "end_time": "2024-06-21T05:59:43.207596",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.175351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>model</th>\n",
       "      <th>model_year</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>engine</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>clean_title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>54273</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>E-Class E 350</td>\n",
       "      <td>2014</td>\n",
       "      <td>73000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>302.0HP 3.5L V6 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>A/T</td>\n",
       "      <td>White</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54274</th>\n",
       "      <td>Lexus</td>\n",
       "      <td>RX 350 Base</td>\n",
       "      <td>2015</td>\n",
       "      <td>128032</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>275.0HP 3.5L V6 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>8-Speed A/T</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54275</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>C-Class C 300</td>\n",
       "      <td>2015</td>\n",
       "      <td>51983</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>241.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>7-Speed A/T</td>\n",
       "      <td>Blue</td>\n",
       "      <td>White</td>\n",
       "      <td>None reported</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54276</th>\n",
       "      <td>Land</td>\n",
       "      <td>Rover Range Rover 5.0L Supercharged Autobiogra...</td>\n",
       "      <td>2018</td>\n",
       "      <td>29500</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>518.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>Transmission w/Dual Shift Mode</td>\n",
       "      <td>White</td>\n",
       "      <td>White</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54277</th>\n",
       "      <td>BMW</td>\n",
       "      <td>X6 xDrive40i</td>\n",
       "      <td>2020</td>\n",
       "      <td>90000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n",
       "      <td>8-Speed A/T</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>At least 1 accident or damage reported</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               brand                                              model  \\\n",
       "id                                                                        \n",
       "54273  Mercedes-Benz                                      E-Class E 350   \n",
       "54274          Lexus                                        RX 350 Base   \n",
       "54275  Mercedes-Benz                                      C-Class C 300   \n",
       "54276           Land  Rover Range Rover 5.0L Supercharged Autobiogra...   \n",
       "54277            BMW                                       X6 xDrive40i   \n",
       "\n",
       "       model_year  milage fuel_type  \\\n",
       "id                                    \n",
       "54273        2014   73000  Gasoline   \n",
       "54274        2015  128032  Gasoline   \n",
       "54275        2015   51983  Gasoline   \n",
       "54276        2018   29500  Gasoline   \n",
       "54277        2020   90000  Gasoline   \n",
       "\n",
       "                                                  engine  \\\n",
       "id                                                         \n",
       "54273      302.0HP 3.5L V6 Cylinder Engine Gasoline Fuel   \n",
       "54274      275.0HP 3.5L V6 Cylinder Engine Gasoline Fuel   \n",
       "54275       241.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n",
       "54276       518.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n",
       "54277  335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n",
       "\n",
       "                         transmission ext_col int_col  \\\n",
       "id                                                      \n",
       "54273                             A/T   White   Beige   \n",
       "54274                     8-Speed A/T  Silver   Black   \n",
       "54275                     7-Speed A/T    Blue   White   \n",
       "54276  Transmission w/Dual Shift Mode   White   White   \n",
       "54277                     8-Speed A/T   White   Black   \n",
       "\n",
       "                                     accident clean_title  \n",
       "id                                                         \n",
       "54273                           None reported         Yes  \n",
       "54274                           None reported         Yes  \n",
       "54275                           None reported         Yes  \n",
       "54276  At least 1 accident or damage reported         Yes  \n",
       "54277  At least 1 accident or damage reported         Yes  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "22a3e12d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.241624Z",
     "iopub.status.busy": "2024-06-21T05:59:43.241352Z",
     "iopub.status.idle": "2024-06-21T05:59:43.327756Z",
     "shell.execute_reply": "2024-06-21T05:59:43.326619Z"
    },
    "papermill": {
     "duration": 0.105587,
     "end_time": "2024-06-21T05:59:43.329794",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.224207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "brand           0\n",
      "model           0\n",
      "model_year      0\n",
      "milage          0\n",
      "fuel_type       0\n",
      "engine          0\n",
      "transmission    0\n",
      "ext_col         0\n",
      "int_col         0\n",
      "accident        0\n",
      "clean_title     0\n",
      "price           0\n",
      "dtype: int64\n",
      "brand           0\n",
      "model           0\n",
      "model_year      0\n",
      "milage          0\n",
      "fuel_type       0\n",
      "engine          0\n",
      "transmission    0\n",
      "ext_col         0\n",
      "int_col         0\n",
      "accident        0\n",
      "clean_title     0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check missing values\n",
    "print(train.isnull().sum())\n",
    "print(test.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "218c1296",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.365135Z",
     "iopub.status.busy": "2024-06-21T05:59:43.364870Z",
     "iopub.status.idle": "2024-06-21T05:59:43.385980Z",
     "shell.execute_reply": "2024-06-21T05:59:43.384860Z"
    },
    "papermill": {
     "duration": 0.041346,
     "end_time": "2024-06-21T05:59:43.387860",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.346514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         model_year         milage         price\n",
      "count  54273.000000   54273.000000  5.427300e+04\n",
      "mean    2015.091979   72746.175667  3.921844e+04\n",
      "std        5.588909   50469.490448  7.282634e+04\n",
      "min     1974.000000     100.000000  2.000000e+03\n",
      "25%     2012.000000   32268.000000  1.550000e+04\n",
      "50%     2016.000000   66107.000000  2.800000e+04\n",
      "75%     2019.000000  102000.000000  4.500000e+04\n",
      "max     2024.000000  405000.000000  2.954083e+06\n"
     ]
    }
   ],
   "source": [
    "print(train.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bd542549",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.422466Z",
     "iopub.status.busy": "2024-06-21T05:59:43.422193Z",
     "iopub.status.idle": "2024-06-21T05:59:43.442557Z",
     "shell.execute_reply": "2024-06-21T05:59:43.441598Z"
    },
    "papermill": {
     "duration": 0.039635,
     "end_time": "2024-06-21T05:59:43.444413",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.404778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "clean_title\n",
      "Yes    36183\n",
      "Name: count, dtype: int64\n",
      "clean_title\n",
      "Yes    54273\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check the different values of tittle\n",
    "print(test['clean_title'].value_counts())\n",
    "print(train['clean_title'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6601c45",
   "metadata": {
    "papermill": {
     "duration": 0.016559,
     "end_time": "2024-06-21T05:59:43.477636",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.461077",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1.Converting model_year to age \n",
    "2.All the cars are cleaned title hence drop the column\n",
    "3.drop rows with feul_type = to '–' or 'not supported'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9420562c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.512709Z",
     "iopub.status.busy": "2024-06-21T05:59:43.512441Z",
     "iopub.status.idle": "2024-06-21T05:59:43.539539Z",
     "shell.execute_reply": "2024-06-21T05:59:43.538711Z"
    },
    "papermill": {
     "duration": 0.04659,
     "end_time": "2024-06-21T05:59:43.541552",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.494962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def age(df):\n",
    "    df['age'] =2024 - df['model_year']\n",
    "    df.drop('model_year', axis=1, inplace=True)\n",
    "    df.drop('clean_title', axis=1, inplace=True)\n",
    "\n",
    "age(train)\n",
    "age(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "18f62854",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.576554Z",
     "iopub.status.busy": "2024-06-21T05:59:43.576303Z",
     "iopub.status.idle": "2024-06-21T05:59:43.589503Z",
     "shell.execute_reply": "2024-06-21T05:59:43.588707Z"
    },
    "papermill": {
     "duration": 0.033013,
     "end_time": "2024-06-21T05:59:43.591435",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.558422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>model</th>\n",
       "      <th>milage</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>engine</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ext_col</th>\n",
       "      <th>int_col</th>\n",
       "      <th>accident</th>\n",
       "      <th>price</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ford</td>\n",
       "      <td>F-150 Lariat</td>\n",
       "      <td>74349</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>10-Speed A/T</td>\n",
       "      <td>Blue</td>\n",
       "      <td>Gray</td>\n",
       "      <td>None reported</td>\n",
       "      <td>11000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BMW</td>\n",
       "      <td>335 i</td>\n",
       "      <td>80000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>300.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n",
       "      <td>6-Speed M/T</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>8250</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jaguar</td>\n",
       "      <td>XF Luxury</td>\n",
       "      <td>91491</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>300.0HP 4.2L 8 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>6-Speed A/T</td>\n",
       "      <td>Purple</td>\n",
       "      <td>Beige</td>\n",
       "      <td>None reported</td>\n",
       "      <td>15000</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BMW</td>\n",
       "      <td>X7 xDrive40i</td>\n",
       "      <td>2437</td>\n",
       "      <td>Hybrid</td>\n",
       "      <td>335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n",
       "      <td>Transmission w/Dual Shift Mode</td>\n",
       "      <td>Gray</td>\n",
       "      <td>Brown</td>\n",
       "      <td>None reported</td>\n",
       "      <td>63500</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pontiac</td>\n",
       "      <td>Firebird Base</td>\n",
       "      <td>111000</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>200.0HP 3.8L V6 Cylinder Engine Gasoline Fuel</td>\n",
       "      <td>A/T</td>\n",
       "      <td>White</td>\n",
       "      <td>Black</td>\n",
       "      <td>None reported</td>\n",
       "      <td>7850</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      brand          model  milage fuel_type  \\\n",
       "id                                             \n",
       "0      Ford   F-150 Lariat   74349  Gasoline   \n",
       "1       BMW          335 i   80000  Gasoline   \n",
       "2    Jaguar      XF Luxury   91491  Gasoline   \n",
       "3       BMW   X7 xDrive40i    2437    Hybrid   \n",
       "4   Pontiac  Firebird Base  111000  Gasoline   \n",
       "\n",
       "                                               engine  \\\n",
       "id                                                      \n",
       "0       375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel   \n",
       "1   300.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n",
       "2        300.0HP 4.2L 8 Cylinder Engine Gasoline Fuel   \n",
       "3   335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n",
       "4       200.0HP 3.8L V6 Cylinder Engine Gasoline Fuel   \n",
       "\n",
       "                      transmission ext_col int_col       accident  price  age  \n",
       "id                                                                             \n",
       "0                     10-Speed A/T    Blue    Gray  None reported  11000    6  \n",
       "1                      6-Speed M/T   Black   Black  None reported   8250   17  \n",
       "2                      6-Speed A/T  Purple   Beige  None reported  15000   15  \n",
       "3   Transmission w/Dual Shift Mode    Gray   Brown  None reported  63500    2  \n",
       "4                              A/T   White   Black  None reported   7850   23  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49a54efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.627351Z",
     "iopub.status.busy": "2024-06-21T05:59:43.627092Z",
     "iopub.status.idle": "2024-06-21T05:59:43.630515Z",
     "shell.execute_reply": "2024-06-21T05:59:43.629844Z"
    },
    "papermill": {
     "duration": 0.023045,
     "end_time": "2024-06-21T05:59:43.632352",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.609307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#drop the rows that have doesnt 'HP' in them\n",
    "#train = train[train['engine'].str.contains('HP')]\n",
    "#test = test[test['engine'].str.contains('HP')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94c00540",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.667098Z",
     "iopub.status.busy": "2024-06-21T05:59:43.666862Z",
     "iopub.status.idle": "2024-06-21T05:59:43.697845Z",
     "shell.execute_reply": "2024-06-21T05:59:43.696916Z"
    },
    "papermill": {
     "duration": 0.05106,
     "end_time": "2024-06-21T05:59:43.700291",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.649231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "engine\n",
      "300.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel    886\n",
      "355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel             784\n",
      "240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel             681\n",
      "285.0HP 3.6L V6 Cylinder Engine Gasoline Fuel            639\n",
      "420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel             608\n",
      "                                                        ... \n",
      "320.0HP Electric Motor Electric Fuel System                1\n",
      "3.4L V6 24V PDI DOHC Twin Turbo                            1\n",
      "214.0HP Electric Motor Electric Fuel System                1\n",
      "141.0HP 2.0L 4 Cylinder Engine Gasoline Fuel               1\n",
      "226.0HP 1.6L 4 Cylinder Engine Gas/Electric Hybrid         1\n",
      "Name: count, Length: 1038, dtype: int64\n",
      "engine\n",
      "300.0HP 3.0L Straight 6 Cylinder Engine Gasoline Fuel    1452\n",
      "355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel             1125\n",
      "240.0HP 2.0L 4 Cylinder Engine Gasoline Fuel             1054\n",
      "285.0HP 3.6L V6 Cylinder Engine Gasoline Fuel             979\n",
      "420.0HP 6.2L 8 Cylinder Engine Gasoline Fuel              893\n",
      "                                                         ... \n",
      "3.0 Liter SC ULEV                                           1\n",
      "321.0HP 3.0L V6 Cylinder Engine Gas/Electric Hybrid         1\n",
      "691.0HP Electric Motor Electric Fuel System                 1\n",
      "3.6 Liter DOHC                                              1\n",
      "2.0 Liter TSI                                               1\n",
      "Name: count, Length: 1061, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check the different values of engine\n",
    "print(test['engine'].value_counts())\n",
    "print(train['engine'].value_counts())\n",
    "\n",
    "unique_engine_test = test['engine'].unique()\n",
    "unique_engine_train = train['engine'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cd911c0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.736148Z",
     "iopub.status.busy": "2024-06-21T05:59:43.735887Z",
     "iopub.status.idle": "2024-06-21T05:59:43.753089Z",
     "shell.execute_reply": "2024-06-21T05:59:43.752257Z"
    },
    "papermill": {
     "duration": 0.03721,
     "end_time": "2024-06-21T05:59:43.755145",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.717935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fuel_type\n",
      "Gasoline          33033\n",
      "Hybrid             1112\n",
      "E85 Flex Fuel      1018\n",
      "Diesel              671\n",
      "–                   197\n",
      "Plug-In Hybrid      148\n",
      "not supported         4\n",
      "Name: count, dtype: int64\n",
      "fuel_type\n",
      "Gasoline          49439\n",
      "Hybrid             1766\n",
      "E85 Flex Fuel      1479\n",
      "Diesel             1109\n",
      "–                   294\n",
      "Plug-In Hybrid      182\n",
      "not supported         4\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(test['fuel_type'].value_counts())\n",
    "print(train['fuel_type'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "11bd0fea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.792118Z",
     "iopub.status.busy": "2024-06-21T05:59:43.791883Z",
     "iopub.status.idle": "2024-06-21T05:59:43.824535Z",
     "shell.execute_reply": "2024-06-21T05:59:43.823720Z"
    },
    "papermill": {
     "duration": 0.052922,
     "end_time": "2024-06-21T05:59:43.826790",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.773868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_25/2693774066.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train['fuel_type'].replace('–', 'Electric', inplace = True)\n",
      "/tmp/ipykernel_25/2693774066.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test['fuel_type'].replace('–', 'Electric', inplace = True)\n",
      "/tmp/ipykernel_25/2693774066.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train['fuel_type'].replace('not supported', 'Electric', inplace = True)\n",
      "/tmp/ipykernel_25/2693774066.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test['fuel_type'].replace('not supported', 'Electric', inplace = True)\n"
     ]
    }
   ],
   "source": [
    "train['fuel_type'].replace('–', 'Electric', inplace = True)\n",
    "test['fuel_type'].replace('–', 'Electric', inplace = True)\n",
    "train['fuel_type'].replace('not supported', 'Electric', inplace = True)\n",
    "test['fuel_type'].replace('not supported', 'Electric', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d889d844",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.864698Z",
     "iopub.status.busy": "2024-06-21T05:59:43.864428Z",
     "iopub.status.idle": "2024-06-21T05:59:43.881428Z",
     "shell.execute_reply": "2024-06-21T05:59:43.880605Z"
    },
    "papermill": {
     "duration": 0.038056,
     "end_time": "2024-06-21T05:59:43.883965",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.845909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fuel_type\n",
      "Gasoline          33033\n",
      "Hybrid             1112\n",
      "E85 Flex Fuel      1018\n",
      "Diesel              671\n",
      "Electric            201\n",
      "Plug-In Hybrid      148\n",
      "Name: count, dtype: int64\n",
      "fuel_type\n",
      "Gasoline          49439\n",
      "Hybrid             1766\n",
      "E85 Flex Fuel      1479\n",
      "Diesel             1109\n",
      "Electric            298\n",
      "Plug-In Hybrid      182\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(test['fuel_type'].value_counts())\n",
    "print(train['fuel_type'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6755c9f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:43.923476Z",
     "iopub.status.busy": "2024-06-21T05:59:43.923008Z",
     "iopub.status.idle": "2024-06-21T05:59:44.736741Z",
     "shell.execute_reply": "2024-06-21T05:59:44.735959Z"
    },
    "papermill": {
     "duration": 0.835418,
     "end_time": "2024-06-21T05:59:44.739062",
     "exception": false,
     "start_time": "2024-06-21T05:59:43.903644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "# Define function to extract power\n",
    "def extract_power(engine_type):\n",
    "    match = re.search(r'(\\d+\\.\\d+)HP|\\d+\\.\\d+', engine_type)\n",
    "    return match.group(1) if match else np.nan\n",
    "\n",
    "# Define function to extract displacement\n",
    "def extract_displacement(engine_type):\n",
    "    match = re.search(r'(\\d+\\.\\d+)L', engine_type)\n",
    "    return match.group(1) if match else np.nan\n",
    "\n",
    "# Define function to extract number of cylinders\n",
    "def extract_cylinders(engine_type):\n",
    "    match = re.search(r'(\\d+)\\s*Cylinders?', engine_type, re.IGNORECASE)\n",
    "    return match.group(1) if match else np.nan\n",
    "\n",
    "train['power'] = train['engine'].apply(extract_power)\n",
    "test['power'] = test['engine'].apply(extract_power)\n",
    "train['displacement'] = train['engine'].apply(extract_displacement)\n",
    "test['displacement'] = test['engine'].apply(extract_displacement)\n",
    "train['cylinders'] = train['engine'].apply(extract_cylinders)\n",
    "test['cylinders'] = test['engine'].apply(extract_cylinders)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2d0c33c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:44.775586Z",
     "iopub.status.busy": "2024-06-21T05:59:44.775316Z",
     "iopub.status.idle": "2024-06-21T05:59:44.839205Z",
     "shell.execute_reply": "2024-06-21T05:59:44.838359Z"
    },
    "papermill": {
     "duration": 0.084317,
     "end_time": "2024-06-21T05:59:44.841254",
     "exception": false,
     "start_time": "2024-06-21T05:59:44.756937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand              0\n",
       "model              0\n",
       "milage             0\n",
       "fuel_type          0\n",
       "engine             0\n",
       "transmission       0\n",
       "ext_col            0\n",
       "int_col            0\n",
       "accident           0\n",
       "price              0\n",
       "age                0\n",
       "power           4057\n",
       "displacement     606\n",
       "cylinders       4175\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3e56b8c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:44.880399Z",
     "iopub.status.busy": "2024-06-21T05:59:44.879857Z",
     "iopub.status.idle": "2024-06-21T05:59:44.925207Z",
     "shell.execute_reply": "2024-06-21T05:59:44.924277Z"
    },
    "papermill": {
     "duration": 0.066265,
     "end_time": "2024-06-21T05:59:44.927250",
     "exception": false,
     "start_time": "2024-06-21T05:59:44.860985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand              0\n",
       "model              0\n",
       "milage             0\n",
       "fuel_type          0\n",
       "engine             0\n",
       "transmission       0\n",
       "ext_col            0\n",
       "int_col            0\n",
       "accident           0\n",
       "age                0\n",
       "power           2606\n",
       "displacement     405\n",
       "cylinders       2712\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "63b699bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:44.964726Z",
     "iopub.status.busy": "2024-06-21T05:59:44.964444Z",
     "iopub.status.idle": "2024-06-21T05:59:45.021282Z",
     "shell.execute_reply": "2024-06-21T05:59:45.020578Z"
    },
    "papermill": {
     "duration": 0.077797,
     "end_time": "2024-06-21T05:59:45.023144",
     "exception": false,
     "start_time": "2024-06-21T05:59:44.945347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['power'] = pd.to_numeric(train['power'], errors = 'coerce')\n",
    "test['power'] = pd.to_numeric(test['power'], errors = 'coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4e88b9d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.059576Z",
     "iopub.status.busy": "2024-06-21T05:59:45.059327Z",
     "iopub.status.idle": "2024-06-21T05:59:45.066130Z",
     "shell.execute_reply": "2024-06-21T05:59:45.065302Z"
    },
    "papermill": {
     "duration": 0.027358,
     "end_time": "2024-06-21T05:59:45.068221",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.040863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_25/4277566928.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train['power'].fillna(train['power'].mean(), inplace = True)\n",
      "/tmp/ipykernel_25/4277566928.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test['power'].fillna(test['power'].mean(), inplace = True)\n"
     ]
    }
   ],
   "source": [
    "train['power'].fillna(train['power'].mean(), inplace = True)\n",
    "test['power'].fillna(test['power'].mean(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7c74ff73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.144849Z",
     "iopub.status.busy": "2024-06-21T05:59:45.144266Z",
     "iopub.status.idle": "2024-06-21T05:59:45.207268Z",
     "shell.execute_reply": "2024-06-21T05:59:45.206430Z"
    },
    "papermill": {
     "duration": 0.084201,
     "end_time": "2024-06-21T05:59:45.209234",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.125033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_25/198984194.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train['displacement'].fillna(train['displacement'].mean(), inplace = True)\n",
      "/tmp/ipykernel_25/198984194.py:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test['displacement'].fillna(test['displacement'].mean(), inplace = True)\n"
     ]
    }
   ],
   "source": [
    "train['displacement'] = pd.to_numeric(train['displacement'], errors = 'coerce')\n",
    "test['displacement'] = pd.to_numeric(test['displacement'], errors = 'coerce')\n",
    "\n",
    "train['displacement'].fillna(train['displacement'].mean(), inplace = True)\n",
    "test['displacement'].fillna(test['displacement'].mean(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6a4a7d42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.246525Z",
     "iopub.status.busy": "2024-06-21T05:59:45.246013Z",
     "iopub.status.idle": "2024-06-21T05:59:45.334936Z",
     "shell.execute_reply": "2024-06-21T05:59:45.333979Z"
    },
    "papermill": {
     "duration": 0.109952,
     "end_time": "2024-06-21T05:59:45.337204",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.227252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_25/3577290355.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train['cylinders'].fillna(train['cylinders'].mean(), inplace = True)\n",
      "/tmp/ipykernel_25/3577290355.py:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test['cylinders'].fillna(test['cylinders'].mean(), inplace = True)\n"
     ]
    }
   ],
   "source": [
    "train['cylinders'] = pd.to_numeric(train['cylinders'], errors = 'coerce')\n",
    "test['cylinders'] = pd.to_numeric(test['cylinders'], errors = 'coerce')\n",
    "\n",
    "train['cylinders'].fillna(train['cylinders'].mean(), inplace = True)\n",
    "test['cylinders'].fillna(test['cylinders'].mean(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "123df0dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.376118Z",
     "iopub.status.busy": "2024-06-21T05:59:45.375422Z",
     "iopub.status.idle": "2024-06-21T05:59:45.471483Z",
     "shell.execute_reply": "2024-06-21T05:59:45.470659Z"
    },
    "papermill": {
     "duration": 0.118985,
     "end_time": "2024-06-21T05:59:45.475012",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.356027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "brand           0\n",
      "model           0\n",
      "milage          0\n",
      "fuel_type       0\n",
      "engine          0\n",
      "transmission    0\n",
      "ext_col         0\n",
      "int_col         0\n",
      "accident        0\n",
      "price           0\n",
      "age             0\n",
      "power           0\n",
      "displacement    0\n",
      "cylinders       0\n",
      "dtype: int64\n",
      "brand           0\n",
      "model           0\n",
      "milage          0\n",
      "fuel_type       0\n",
      "engine          0\n",
      "transmission    0\n",
      "ext_col         0\n",
      "int_col         0\n",
      "accident        0\n",
      "age             0\n",
      "power           0\n",
      "displacement    0\n",
      "cylinders       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(train.isna().sum())\n",
    "print(test.isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "aca0aa4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.517910Z",
     "iopub.status.busy": "2024-06-21T05:59:45.517601Z",
     "iopub.status.idle": "2024-06-21T05:59:45.557478Z",
     "shell.execute_reply": "2024-06-21T05:59:45.556364Z"
    },
    "papermill": {
     "duration": 0.061155,
     "end_time": "2024-06-21T05:59:45.559308",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.498153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 36183 entries, 54273 to 90455\n",
      "Data columns (total 13 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   brand         36183 non-null  object \n",
      " 1   model         36183 non-null  object \n",
      " 2   milage        36183 non-null  int64  \n",
      " 3   fuel_type     36183 non-null  object \n",
      " 4   engine        36183 non-null  object \n",
      " 5   transmission  36183 non-null  object \n",
      " 6   ext_col       36183 non-null  object \n",
      " 7   int_col       36183 non-null  object \n",
      " 8   accident      36183 non-null  object \n",
      " 9   age           36183 non-null  int64  \n",
      " 10  power         36183 non-null  float64\n",
      " 11  displacement  36183 non-null  float64\n",
      " 12  cylinders     36183 non-null  float64\n",
      "dtypes: float64(3), int64(2), object(8)\n",
      "memory usage: 3.9+ MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3dacd5c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.605600Z",
     "iopub.status.busy": "2024-06-21T05:59:45.605296Z",
     "iopub.status.idle": "2024-06-21T05:59:45.620466Z",
     "shell.execute_reply": "2024-06-21T05:59:45.619619Z"
    },
    "papermill": {
     "duration": 0.039076,
     "end_time": "2024-06-21T05:59:45.622388",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.583312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.drop('engine', axis=1, inplace=True)\n",
    "test.drop('engine', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d8cc318a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.660576Z",
     "iopub.status.busy": "2024-06-21T05:59:45.660290Z",
     "iopub.status.idle": "2024-06-21T05:59:45.677238Z",
     "shell.execute_reply": "2024-06-21T05:59:45.676435Z"
    },
    "papermill": {
     "duration": 0.037968,
     "end_time": "2024-06-21T05:59:45.679186",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.641218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accident\n",
      "None reported                             39896\n",
      "At least 1 accident or damage reported    14377\n",
      "Name: count, dtype: int64\n",
      "accident\n",
      "None reported                             26598\n",
      "At least 1 accident or damage reported     9585\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(train['accident'].value_counts())\n",
    "print(test['accident'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9de9dffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.721022Z",
     "iopub.status.busy": "2024-06-21T05:59:45.720603Z",
     "iopub.status.idle": "2024-06-21T05:59:45.738018Z",
     "shell.execute_reply": "2024-06-21T05:59:45.737199Z"
    },
    "papermill": {
     "duration": 0.042643,
     "end_time": "2024-06-21T05:59:45.740075",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.697432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transmission_type = train['transmission'].value_counts()\n",
    "transmission_type_test = test['transmission'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4284b6de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.781571Z",
     "iopub.status.busy": "2024-06-21T05:59:45.781293Z",
     "iopub.status.idle": "2024-06-21T05:59:45.787398Z",
     "shell.execute_reply": "2024-06-21T05:59:45.786618Z"
    },
    "papermill": {
     "duration": 0.028872,
     "end_time": "2024-06-21T05:59:45.789229",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.760357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"# Regular expressions to match patterns\\nautomatic_pattern = re.compile(r'\\x08A/T\\x08|\\x08Automatic\\x08||')\\nmanual_pattern = re.compile(r'\\x08M/T\\x08|\\x08Manual\\x08|\\x08\\\\d+-Speed Manual\\x08|d+-Speed M/T\\x08')\\ncvt_pattern = re.compile(r'\\x08CVT\\x08')\\n\\n# Function to categorize transmission types\\ndef categorize_transmission(transmission):\\n    if re.search(automatic_pattern, transmission):\\n        return 'Automatic'\\n    elif re.search(manual_pattern, transmission):\\n        return 'Manual'\\n    elif re.search(cvt_pattern, transmission):\\n        return 'CVT'\\n    else:\\n        return transmission  # Return original value if no match found\\n\\n# Apply the categorization function\\ntrain['transmission_standardized'] = train['transmission'].apply(categorize_transmission)\\n\""
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"# Regular expressions to match patterns\n",
    "automatic_pattern = re.compile(r'\\bA/T\\b|\\bAutomatic\\b||')\n",
    "manual_pattern = re.compile(r'\\bM/T\\b|\\bManual\\b|\\b\\d+-Speed Manual\\b|d+-Speed M/T\\b')\n",
    "cvt_pattern = re.compile(r'\\bCVT\\b')\n",
    "\n",
    "# Function to categorize transmission types\n",
    "def categorize_transmission(transmission):\n",
    "    if re.search(automatic_pattern, transmission):\n",
    "        return 'Automatic'\n",
    "    elif re.search(manual_pattern, transmission):\n",
    "        return 'Manual'\n",
    "    elif re.search(cvt_pattern, transmission):\n",
    "        return 'CVT'\n",
    "    else:\n",
    "        return transmission  # Return original value if no match found\n",
    "\n",
    "# Apply the categorization function\n",
    "train['transmission_standardized'] = train['transmission'].apply(categorize_transmission)\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "836abb36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.827656Z",
     "iopub.status.busy": "2024-06-21T05:59:45.827111Z",
     "iopub.status.idle": "2024-06-21T05:59:45.871356Z",
     "shell.execute_reply": "2024-06-21T05:59:45.870322Z"
    },
    "papermill": {
     "duration": 0.065713,
     "end_time": "2024-06-21T05:59:45.873444",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.807731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 54273 entries, 0 to 54272\n",
      "Data columns (total 13 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   brand         54273 non-null  object \n",
      " 1   model         54273 non-null  object \n",
      " 2   milage        54273 non-null  int64  \n",
      " 3   fuel_type     54273 non-null  object \n",
      " 4   transmission  54273 non-null  object \n",
      " 5   ext_col       54273 non-null  object \n",
      " 6   int_col       54273 non-null  object \n",
      " 7   accident      54273 non-null  object \n",
      " 8   price         54273 non-null  int64  \n",
      " 9   age           54273 non-null  int64  \n",
      " 10  power         54273 non-null  float64\n",
      " 11  displacement  54273 non-null  float64\n",
      " 12  cylinders     54273 non-null  float64\n",
      "dtypes: float64(3), int64(3), object(7)\n",
      "memory usage: 5.8+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "cc1e2430",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.914083Z",
     "iopub.status.busy": "2024-06-21T05:59:45.913843Z",
     "iopub.status.idle": "2024-06-21T05:59:45.942654Z",
     "shell.execute_reply": "2024-06-21T05:59:45.941926Z"
    },
    "papermill": {
     "duration": 0.050877,
     "end_time": "2024-06-21T05:59:45.944963",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.894086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.drop('model', axis=1, inplace=True)\n",
    "test.drop('model', axis=1, inplace=True)\n",
    "train.drop('ext_col', axis=1, inplace=True)\n",
    "test.drop('ext_col', axis=1, inplace=True)\n",
    "train.drop('int_col', axis=1, inplace=True)\n",
    "test.drop('int_col', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "028f1781",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:45.984452Z",
     "iopub.status.busy": "2024-06-21T05:59:45.983799Z",
     "iopub.status.idle": "2024-06-21T05:59:46.013404Z",
     "shell.execute_reply": "2024-06-21T05:59:46.012372Z"
    },
    "papermill": {
     "duration": 0.051507,
     "end_time": "2024-06-21T05:59:46.015366",
     "exception": false,
     "start_time": "2024-06-21T05:59:45.963859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 54273 entries, 0 to 54272\n",
      "Data columns (total 10 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   brand         54273 non-null  object \n",
      " 1   milage        54273 non-null  int64  \n",
      " 2   fuel_type     54273 non-null  object \n",
      " 3   transmission  54273 non-null  object \n",
      " 4   accident      54273 non-null  object \n",
      " 5   price         54273 non-null  int64  \n",
      " 6   age           54273 non-null  int64  \n",
      " 7   power         54273 non-null  float64\n",
      " 8   displacement  54273 non-null  float64\n",
      " 9   cylinders     54273 non-null  float64\n",
      "dtypes: float64(3), int64(3), object(4)\n",
      "memory usage: 4.6+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e04ecadc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:46.054886Z",
     "iopub.status.busy": "2024-06-21T05:59:46.054608Z",
     "iopub.status.idle": "2024-06-21T05:59:46.081988Z",
     "shell.execute_reply": "2024-06-21T05:59:46.081153Z"
    },
    "papermill": {
     "duration": 0.048721,
     "end_time": "2024-06-21T05:59:46.083810",
     "exception": false,
     "start_time": "2024-06-21T05:59:46.035089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand           0\n",
       "milage          0\n",
       "fuel_type       0\n",
       "transmission    0\n",
       "accident        0\n",
       "price           0\n",
       "age             0\n",
       "power           0\n",
       "displacement    0\n",
       "cylinders       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "train.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "256fe273",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:46.122112Z",
     "iopub.status.busy": "2024-06-21T05:59:46.121875Z",
     "iopub.status.idle": "2024-06-21T05:59:46.141988Z",
     "shell.execute_reply": "2024-06-21T05:59:46.141228Z"
    },
    "papermill": {
     "duration": 0.041366,
     "end_time": "2024-06-21T05:59:46.143795",
     "exception": false,
     "start_time": "2024-06-21T05:59:46.102429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "brand           0\n",
       "milage          0\n",
       "fuel_type       0\n",
       "transmission    0\n",
       "accident        0\n",
       "age             0\n",
       "power           0\n",
       "displacement    0\n",
       "cylinders       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "714342d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:46.182945Z",
     "iopub.status.busy": "2024-06-21T05:59:46.182322Z",
     "iopub.status.idle": "2024-06-21T05:59:48.181265Z",
     "shell.execute_reply": "2024-06-21T05:59:48.180336Z"
    },
    "papermill": {
     "duration": 2.021509,
     "end_time": "2024-06-21T05:59:48.184115",
     "exception": false,
     "start_time": "2024-06-21T05:59:46.162606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<Axes: title={'center': 'milage'}>,\n",
       "        <Axes: title={'center': 'price'}>],\n",
       "       [<Axes: title={'center': 'age'}>,\n",
       "        <Axes: title={'center': 'power'}>],\n",
       "       [<Axes: title={'center': 'displacement'}>,\n",
       "        <Axes: title={'center': 'cylinders'}>]], dtype=object)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Hn/8caNx48ZGUFCQcf311xu9evUyf0jxNL9rpVaGcel68dq6vF82Tnh9AagMl3q/33nnnebP5qUu93MgKpaV+Rk5cqQZGxkZadx9993G559/7oWsr36XO5ZNSkoy7rzzzjLPudznLyqG1fl56aWXjKZNmxohISFG3bp1jR49ehhr1671TvJXOU+O1fns8Z4rmR8+e6rO5X4f4e33jp9hGEbFn8cCAAAAAAAAAABQ/XCPEwAAAAAAAAAAABcaJwAAAAAAAAAAAC40TgAAAAAAAAAAAFxonAAAAAAAAAAAALjQOAEAAAAAAAAAAHChcQIAAAAAAAAAAOBC4wQAAAAAAAAAAMCFxgkAAAAAAAAAAPC6DRs2qF+/foqOjpafn5+WLl1qeR2GYeiVV17RzTffrODgYN1www164YUXLK2jhuWtAgAAAAAAAAAAVLDTp0+rffv2evzxx3Xfffdd0TqefPJJZWVl6ZVXXlHbtm11/PhxHT9+3NI6/AzDMK5o6wAAAAAAAAAAAJXAz89PS5Ys0b333muOORwO/fnPf9bf/vY3nThxQm3atNFLL72kHj16SJK+/PJLtWvXTrt371bz5s2veNtcqgsAAAAAAAAAAPi8lJQU5eTk6P3339fOnTv1u9/9Tn369NH+/fslSR9//LFuvPFGLVu2TLGxsWrSpImGDBli+YwTGicAAAAAAAAAAMCnHT58WPPnz9fixYvVvXt3NW3aVE8//bS6deum+fPnS5K++eYb/fvf/9bixYv17rvvKjMzU7m5ubr//vstbYt7nAAAAAAAAAAAAJ+2a9cuFRcX6+abb3YbdzgcqlevniSppKREDodD7777rhk3b948derUSfv27fP48l00TgAAAAAAAAAAgE87deqUAgIClJubq4CAALdltWvXliQ1aNBANWrUcGuutGzZUtLPZ6zQOAEAAAAAAAAAAFeFW265RcXFxTp27Ji6d+9ebsztt9+u8+fP68CBA2ratKkk6V//+pckqXHjxh5vy88wDOPXpwwAAAAAAAAAAHDlTp06pa+//lrSz42S6dOnq2fPnqpbt64aNWqk//3f/9Vnn32madOm6ZZbbtH333+vNWvWqF27dkpMTFRJSYl+85vfqHbt2po5c6ZKSkqUnJwsm82mrKwsj/OgcQIAAAAAAAAAALxu3bp16tmzZ5nxpKQkZWZmyul06vnnn9e7776r7777TvXr11fXrl01ceJEtW3bVpJ05MgRjRgxQllZWapVq5b69u2radOmqW7duh7nQeMEAAAAAAAAAADAxd/bCQAAAAAAAAAAAPgKGicAAAAAAAAAAAAuNE4AAAAAAAAAAABcaJwAAAAAAAAAAAC40DgBAAAAAAAAAABwoXECAAAAAAAAAADgQuMEAAAAAAAAAADAhcYJAAAAAAAAAACAC40TAAAAAAAAAAAAFxonAAAAAAAAAAAALjROAAAAAAAAAAAAXGicAAAAAAAAAAAAuNA4AQAAAAAAAAAAcKFxAgAAAAAAAAAA4ELjBAAAAAAAAAAAwIXGCQAAAAAAAAAAgAuNEwAAAAAAAAAAABcaJwAAAAAAAAAAAC40TgAAAAAAAAAAAFxonAAAAAAAAAAAALjQOAEAAAAAAAAAAHChcQIAAAAAAAAAAOBC4wQAAAAAAAAAAMCFxgkAAAAAAAAAAIALjRMAAAAAAAAAAAAXGicAAAAAAAAAAAAuNE4AAAAAAAAAAABcaJwAAAAAAAAAAAC40DgBAAAAAAAAAABwoXECAAAAAAAAAADgQuMEAAAAAAAAAADAhcYJAAAAAAAAAACAC40TAAAAAAAAAAAAFxonAAAAAAAAAAAALjROAAAAAAAAAAAAXGicAAAAAAAAAAAAuNA4AQAAAAAAAAAAcKFxAgAAAAAAAMBUUlKic+fOeTsNAPAaGicAcBX797//rT/84Q9q3ry5atasqXr16ul3v/udDh06VCZ2586duvPOO1WzZk01bNhQzz//vObPny8/P78y8f/85z/VvXt31apVS9ddd50SExO1Z8+eqtkpAAAAAPBxEyZMkJ+fn7766is98MADstlsqlevnp588km3hsT58+c1efJkNW3aVMHBwWrSpIn+9Kc/yeFwmDGpqamqV6+eDMMwx0aMGCE/Pz+9+uqr5lhBQYH8/Pw0Z84cc8zhcOi5555Ts2bNFBwcrJiYGI0ZM8Zt/ZLk5+enlJQULViwQK1bt1ZwcLBWrlxZGaUBgGqhhrcTAABUnm3btmnTpk166KGH1LBhQx06dEhz5sxRjx49tHfvXoWGhkqSvvvuO/Xs2VN+fn5KS0tTrVq19NZbbyk4OLjMOv/6178qKSlJCQkJeumll3TmzBnNmTNH3bp1044dO9SkSZMq3ksAAAAA8E0PPPCAmjRpovT0dG3evFmvvvqqfvzxR7377ruSpCFDhuidd97R/fffr6eeekpbtmxRenq6vvzySy1ZskSS1L17d82YMUN79uxRmzZtJEmffvqp/P399emnn+qPf/yjOSZJd9xxh6Sfzxr57W9/q40bN2ro0KFq2bKldu3apRkzZuhf//qXli5d6pbr2rVrtWjRIqWkpKh+/foc2wG4ptE4AYCrWGJiou6//363sX79+slut+v/+//+Pw0cOFCS9NJLL+nHH3/U559/rg4dOkiSBg0apJtuusntuadOndIf//hHDRkyRG+++aY5npSUpObNm+vFF190GwcAAACAa1lsbKz+8Y9/SJKSk5Nls9k0e/ZsPf300zIMQ++8846GDBmiv/zlL5KkP/zhD4qIiNArr7yiTz75RD179lS3bt0k/dwYadOmjU6ePKldu3apf//+2rBhg7mtTz/9VHXr1lWrVq0kSQsXLtTq1au1fv16cx2S1KZNGw0bNkybNm3SbbfdZo7v27dPu3btMp8PANcyLtUFAFexmjVrml87nU798MMPatasmcLDw/X555+by1auXCm73W42TSSpbt26GjBggNv6srOzdeLECT388MP6z3/+Y/4LCAhQly5d9Mknn1T6PgEAAABAdZGcnOz2eMSIEZKkFStWaMWKFZJ+vhTXhZ566ilJ0vLlyyVJ119/vVq0aGE2ST777DMFBARo9OjRKigo0P79+yX93Djp1q2b/Pz8JEmLFy9Wy5Yt1aJFC7fjt7vuukuSyhy/3XnnnTRNAMCFM04A4Cp29uxZpaena/78+fruu+/crol78uRJ8+t///vfstvtZZ7frFkzt8elP5CX/qD9SzabrSLSBgAAAICrwi/P4m/atKn8/f3N+0j6+/uXOe6KiopSeHi4/v3vf5tj3bt3Nxstn376qTp37qzOnTurbt26+vTTTxUZGakvvvhCjzzyiPmc/fv368svv9T1119fbm7Hjh1zexwbG3vF+wkAVxsaJwBwFRsxYoTmz5+vkSNHym63KywsTH5+fnrooYdUUlJieX2lz/nrX/+qqKioMstr1OBjBQAAAAAupvRskMuN/VK3bt30l7/8Rd98840+/fRTde/eXX5+furWrZs+/fRTRUdHq6SkRN27dzefU1JSorZt22r69OnlrjMmJsbt8YVXLACAax2/4QKAq9iHH36o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K8cXECAxD/A95gGYA5Aazjyo6hfdrqhwcurUKf3973/XyJEjFR8fr8DAQG3ZskUpKSmSpCNHjujYsWOy2WySJJvNpjlz5qi4uNj8FpPdbpfValVcXJwZs2HDBo/t2O12cx0XY7FYZLFYKrUHBgb65EMRX20XdY+xbjoY66aBcW46GOumwRfjzLyCr0yePFlTp07V8OHDJUk9e/bUV199paysLKWmpppfVisqKlL79u3N5YqKitSnTx9J33+Rrbi42GO958+f14kTJy77ZbeKvgupL190w5XjCwiQmAf4HvMAzAFIDW8eVPWLbl4VTn7729/qzjvvVKdOnXT8+HE98cQTCggI0H333afQ0FCNHTtWGRkZat26taxWqx555BHZbDYNGDBAkpSYmKi4uDiNHDlS2dnZKiws1PTp05WWlmYWPcaPH6/FixdrypQpGjNmjLZu3arVq1dr/fr1Xh4CAAAAAGg6zpw5I39/f4+2gIAAlZeXS5JiYmIUGRmpLVu2mIUSh8OhPXv2aMKECZK+/yJbSUmJ8vPzFR8fL0naunWrysvL1b9/fzPm97//vVwul3lybLfb1bVr14s+36S+fdENV46xg8Q8wPeYB2AOQGo486CqOfpfPuQ//u///k/33Xefunbtql/+8pdq06aNdu/erXbt2kmSFixYoDvuuEMpKSm65ZZbFBkZqb/+9a/m8gEBAVq3bp0CAgJks9l0//33a9SoUZo1a5YZExMTo/Xr18tut6t3796aN2+eli9frqSkJG9SBQAAAIAm5c4779ScOXO0fv16ffnll1q7dq3mz5+vu+++W5Lk5+en9PR0Pfnkk3rzzTd14MABjRo1SlFRURo2bJgkKTY2Vrfffrseeugh7d27V++9954mTpyo4cOHKyoqSpL0q1/9SkFBQRo7dqwOHTqk1157TQsXLvS4ogQAAABoyLy64uTVV1+9ZH9wcLCWLFmiJUuWXDSmU6dOlW7F9WMDBw7UBx984E1qAAAAANCkLVq0SI8//rgefvhhFRcXKyoqSr/+9a81Y8YMM2bKlCk6ffq0xo0bp5KSEt10003auHGjgoODzZiVK1dq4sSJGjx4sPz9/ZWSkqLnnnvO7A8NDVVubq7S0tIUHx+vtm3basaMGRo3blyd7i8AAABQW67oGScAAAAAgPqhVatWevbZZ/Xss89eNMbPz0+z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JFUAAAAAAAAAAIDLqnbhZN++fXrhhRfUq1cvj/ZJkybprbfe0po1a7R9+3YdP35c99xzj9lfVlam5ORklZaWateuXXrllVeUk5OjGTNmmDFHjx5VcnKybrvtNhUUFCg9PV0PPvigNm3aVN10AQAAAAAAAAAALqtZdRY6deqURowYoT/+8Y968sknzfaTJ0/qpZde0qpVqzRo0CBJ0ooVKxQbG6vdu3drwIABys3N1eHDh7V582ZFRESoT58+mj17th577DFlZmYqKChIy5YtU0xMjObNmydJio2N1c6dO7VgwQIlJSXVwG6jIeo8db2vUwAAAAAAAAAANHLVKpykpaUpOTlZCQkJHoWT/Px8uVwuJSQkmG3dunVTx44dlZeXpwEDBigvL089e/ZURESEGZOUlKQJEybo0KFDuu6665SXl+exjoqYH94S7MecTqecTqf52uFwSJJcLpdcLld1drNaKrZVl9usDT0ya//qHktArW/Ca96MW2MZa1weY900MM5NB2PdNPhynJlbAAAAANCweV04efXVV/X+++9r3759lfoKCwsVFBSksLAwj/aIiAgVFhaaMT8smlT0V/RdKsbhcOjs2bNq3rx5pW1nZWVp5syZldpzc3MVEhJS9R2sIXa7vc63WZOy+/k6A9/YsGGD18s09LFG1THWTQPj3HQw1k2DL8b5zJkzdb5NAAAAAEDN8apw8o9//EOPPvqo7Ha7goODayunapk2bZoyMjLM1w6HQ9HR0UpMTJTVaq2zPFwul+x2u4YMGaLAwMA6225Nq4srTuqjg5lVvxVcYxlrXB5j3TQwzk0HY900+HKcK658BgAAAAA0TF4VTvLz81VcXKzrr7/ebCsrK9OOHTu0ePFibdq0SaWlpSopKfG46qSoqEiRkZGSpMjISO3du9djvUVFRWZfxd8VbT+MsVqtF7zaRJIsFossFkul9sDAQJ98KOKr7dYUZ5mfr1PwieqMWUMfa1QdY900MM5NB2PdNPhinJlXAAAAANCw+XsTPHjwYB04cEAFBQXmn759+2rEiBHmvwMDA7VlyxZzmSNHjujYsWOy2WySJJvNpgMHDqi4uNiMsdvtslqtiouLM2N+uI6KmIp1AAAAAAAAAAAA1Aavrjhp1aqVevTo4dHWokULtWnTxmwfO3asMjIy1Lp1a1mtVj3yyCOy2WwaMGCAJCkx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qFsul0t2u11DhgxRYGCgr9OpUT0yN3m9zMFM757t4+02vF1/XWnM8wBVxzwAcwBSw5sHFVc+X45XhZOlS5dq6dKl+vLLLyVJ3bt314wZM8xvNp07d07/8z//o1dffVVOp1NJSUl6/vnnPS7lPnbsmCZMmKB33nlHLVu2VGpqqrKystSs2X9S2bZtmzIyMnTo0CFFR0dr+vTpeuCBB7xJFQAAAACatFOnTunvf/+7Ro4cqfj4eAUGBmrLli1KSUmRJB05ckTHjh2TzWaTJNlsNs2ZM0fFxcUKDw+X9P03B61Wq+Li4syYH38D3m63m+u4GIvFIovFUqk9MDCwQZxgo7LGOHbOMj+vl/H2GHi7jfp+jBvjPID3mAdgDkBqOPOgqjn6e7PSDh06aO7cucrPz9f+/fs1aNAg3XXXXTp06JAkadKkSXrrrbe0Zs0abd++XcePH9c999xjLl9WVqbk5GSVlpZq165deuWVV5STk6MZM2aYMUePHlVycrJuu+02FRQUKD09XQ8++KA2bfL+mx8AAAAA0FT89re/1fbt2/Xll19q165duvvuuxUQEKD77rtPoaGhGjt2rDIyMvTOO+8oPz9fo0ePls1m04ABAyRJiYmJiouL08iRI/Xhhx9q06ZNmj59utLS0syix/jx4/XFF19oypQp+uSTT/T8889r9erVmjRpki93HQAAAKhRXl1xcuedd3q8njNnjpYuXardu3erQ4cOeumll7Rq1SoNGjRIkrRixQrFxsZq9+7dGjBggHJzc3X48GFt3rxZERER6tOnj2bPnq3HHntMmZmZCgoK0rJlyxQTE6N58+ZJkmJjY7Vz504tWLBASUn18xJVAAAAAPC1//u//9N9992nb775Ru3atdNNN92k3bt3q127dpKkBQsWyN/fXykpKR53CKgQEBCgdevWacKECbLZbGrRooVSU1M1a9YsMyYmJkbr16/XpEmTtHDhQnXo0EHLly/nXA0AAACNSrWfcVJWVqY1a9bo9OnTstlsys/Pl8vlUkJCghnTrVs3dezYUXl5eRowYIDy8vLUs2dPj1t3JSUlacKECTp06JCuu+465eXleayjIiY9Pb26qQIAAABAo/fqq69esj84OFhLlizRkiVLLhrTqVOnyz6MeuDAgfrggw+qlSMAAADQEHhdODlw4IBsNpvOnTunli1bau3atYqL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aWlq06aNWrZsqZSUFBUVFfkoY1TH0qVL1atXL1mtVlmtVtlsNr399ttmP2PceM2dO1d+fn5KT0832xjvhi8zM1N+fn4ef7p162b2M8YAUDU19V742LFjSk5OVkhIiMLDwzV58mSdP3++LncFNaS6752YAw3fP//5T91///1q06aNmjdvrp49e2r//v1mf1U+Azlx4oRGjBghq9WqsLAwjR07VqdOnarrXUE1lZWV6fHHH1dMTIyaN2+ua665RrNnz5ZhGGYM86DxqYnPP6sy5h999JFuvvlmBQcHKzo6WtnZ2bW9a9VG4aQGvfbaa8rIyNATTzyh999/X71791ZSUpKKi4t9nRquwOnTp9W7d28tWbLkgv3Z2dl67rnntGzZMu3Zs0ctWrRQUlKSzp07V8eZ4kps375daWlp2r17t+x2u1wulxITE3X69GkzZtKkSXrrrbe0Zs0abd++XcePH9c999zjw6zhrQ4dOmju3LnKz8/X/v37NWjQIN111106dOiQJMa4sdq3b59eeOEF9erVy6Od8W4cunfvrq+//tr8s3PnTrOPMQaAqqmJ98JlZWVKTk5WaWmpdu3apVdeeUU5OTmaMWOGL3YJV6C6752YAw3ft99+qxtvvFGBgYF6++23dfjwYc2bN09XXXWVGVOVz0BGjBihQ4cOyW63a926ddqxY4fGjRvni11CNTz99NNaunSpFi9erI8//lhPP/20srOztWjRIjOGedD41MTnn5cbc4fDocTERHXq1En5+fl65plnlJmZqRdffLHW969aDNSYfv36GWlpaebrsrIyIyoqysjKyvJhVqhJkoy1a9ear8vLy43IyEjjmWeeMdtKSkoMi8Vi/OUvf/FBhqgpxcXFhiRj+/bthmF8P66BgYHGmjVrzJiPP/7YkGTk5eX5Kk3UgKuuuspYvnw5Y9xIfffdd8ZPf/pTw263G7feeqvx6KOPGobBz3Rj8cQTTxi9e/e+YB9jDADVV533whs2bDD8/f2NwsJCM2bp0qWG1Wo1nE5n3e4Aqu1K3jsxBxq+xx57zLjpppsu2l+Vz0AOHz5sSDL27dtnxrz99tuGn5+f8c9//rP2kkeNSU5ONsaMGePRds899xgjRowwDIN50BRU5/PPqoz5888/b1x11VUe/yc89thjRteuXWt5j6qHK05qSGlpqfLz85WQkGC2+fv7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XLlSkyZN8lhu5cqVatWqle666y6vtzl37lz5+/vrt7/9rU6ePKns7GyNGDFCe/bsMWNeeukl/frXv9bPfvYzpaen64svvtB//dd/qXXr1oqOjjbjvD2n27p1q1avXq2JEyeqbdu26ty5s+x2u+677z4NHjzYPN/6+OOP9d577+nRRx/1ev8AoF4zAABXZNiwYUZwcLDx1VdfmW2HDx82AgICjB/+mu3UqZORmppqvu7du7eRnJx8yXWnpqYakoxHHnnEbCsvLzeSk5ONoKAg41//+pfZLsl44oknzNdnzpyptL68vDxDkvGnP/3JbJsxY4YhyfjrX/9aKb68vNwwDMP43//9X8Pf39949913PfqXLVtmSDLee+89jzwsFotx9OhRs+2FF14wJBmRkZGGw+Ew26dNm2ZIMmPLy8uNn/70p0ZSUpK57Yp9iYmJMYYMGWK2PfHEE4YkY8yYMR453X333UabNm082lq0aOFx7AEAAADAG6NGjTL8/f2Nffv2VeorLy83z3k+/vhjs720tNRo27atx7nIihUrPM6BDMMwbr31VuPWW281X7/zzjuGJCM2NtZwOp1m+8KFCw1JxoEDB8z1h4eHG3369PGIe/HFFw1JHuv09pzO39/fOHTokEfso48+alitVuP8+fOXPlgA0Ahwqy4AuAJlZWXatGmThg0bpo4dO5rtsbGxSkpKuuSyYWFhOnTokD777LPLbmfixInmvysumy4tLdXmzZsvukzz5s3Nf7tcLn3zzTfq0qWLwsLC9P7775t9/+///T/17t1bd999d6V1+Pn5SZLWrFmj2NhYdevWTf/+97/NP4MGDZIkvfPOOx7LDR48WJ07dzZf9+/fX5KUkpKiVq1aVWr/4osvJEkFBQX67LPP9Ktf/UrffPONuZ3Tp09r8ODB2rFjh8rLyz22NX78eI/XN998s7755hs5HI6LHhsAAAAAqKry8nK98cYbuvPOO9W3b99K/X5+fvrlL3+p4OBgrVy50mzftGmT/v3vf+v++++v1nZHjx7t8fyTm2++WdJ/zp/279+v4uJijR8/3iPugQceUGhoqMe6vD2nu/XWWxUXF+fRFhYWptOnT3vcXhoAGisKJwBwBf71r3/p7Nmz+ulPf1qpr2vXrpdcdtasWSopKdG1116rnj17avLkyfroo48qxfn7++snP/mJR9u1114r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AAAAAAAAcKNxAgAAAAAAAAAA4EbjBAAAAAAAAAAAwI3GCQAAAAAAAAAAgBuNEwAAAAAAAAAAADcaJwAAAAAAAAAAAG40TgAAAAAAAAAAANxonAAAAAAAAAAAALjROAEAAAAAAAAAAHCjcQIAAAAAAAAAAOBG4wQAAAAAAAAAAMDNp8bJypUrNWrUKJnNZpnNZlksFv3xj380xi9cuKCcnBz169dPffr0UUZGhmpqajxu4/jx40pPT1evXr0UExOjmTNn6uLFix4x27dv14033iiTyaTrr79excXF/s8QAAAAAAAAAACglXxqnAwYMECLFy9WZWWlDhw4oDvuuEN33323jhw5IknKy8vTO++8o/Xr12vHjh368ssvdc899xjXr6urU3p6umpra7V79269+eabKi4u1rx584yYY8eOKT09XbfffruqqqqUm5urRx99VKWlpe00ZQAAAAAAAAAAgKb18CX4rrvu8rj8/PPPa+XKldqzZ48GDBig1atXq6SkRHfccYckac2aNRo6dKj27NmjcePGqaysTB999JG2bt2q2NhYjR49WgsXLtTTTz+tgoICRUREqKioSImJiVq6dKkkaejQodq1a5eWLVumtLS0dpo2AACQpOue2eTzdT5fnN4BmQAAAAAAAAQHnxonjdXV1Wn9+vU6d+6cLBaLKisr5XQ6lZKSYsQMGTJEgwYNUkVFhcaNG6eKigqNHDlSsbGxRkxaWpqys7N15MgRjRkzRhUVFR630RCTm5vrNR+HwyGHw2FcttvtkiSn0ymn0+nvNINew9y68hzbwhTman4s1OXxXer4Oo4o8H3PqcMFwdUwNIW5mqydNx1dV2+Pc3tprznwO+s/auc/b7Xz5/enOz0GrLu26a71627zBQAAAICuxufGyaFDh2SxWHThwgX16dNHb7/9toYNG6aqqipFREQoOjraIz42NlY2m02SZLPZPJomDeMNY95i7Ha7vvnmG/Xs2bPJvBYtWqT58+dftr2srEy9evXydZqdjtVqDXQKQWnJTS3HLEyuN37evHlzB2bTunwu1dE5+arxHBrXzptgrKuv2nsO/M76j9r5r6nadYXnpSuBddc23a1+58+fD3QKAAAAAIA28LlxMnjwYFVVVenMmTP67W9/q8zMTO3YsaMjcvPJ7NmzlZ+fb1y22+0aOHCgUlNTZTabA5hZx3I6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",
      "text/plain": [
       "<Figure size 2000x1500 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train.hist(bins=50, figsize=(20,15))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "65e96141",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:48.228985Z",
     "iopub.status.busy": "2024-06-21T05:59:48.228655Z",
     "iopub.status.idle": "2024-06-21T05:59:48.595948Z",
     "shell.execute_reply": "2024-06-21T05:59:48.595124Z"
    },
    "papermill": {
     "duration": 0.392211,
     "end_time": "2024-06-21T05:59:48.598000",
     "exception": false,
     "start_time": "2024-06-21T05:59:48.205789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a strip plot for the 'price' variable\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.stripplot(data=train, y='price', jitter=True, color='purple', alpha=0.5)\n",
    "plt.title('Strip Plot: Price Distribution')\n",
    "plt.ylabel('Price')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4e49d5eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:48.641554Z",
     "iopub.status.busy": "2024-06-21T05:59:48.641268Z",
     "iopub.status.idle": "2024-06-21T05:59:48.656096Z",
     "shell.execute_reply": "2024-06-21T05:59:48.655118Z"
    },
    "papermill": {
     "duration": 0.038603,
     "end_time": "2024-06-21T05:59:48.658053",
     "exception": false,
     "start_time": "2024-06-21T05:59:48.619450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29500.0\n"
     ]
    }
   ],
   "source": [
    "Q1 = train['price'].quantile(0.25)\n",
    "Q3 = train['price'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "print(IQR)\n",
    "train = train[~((train['price'] < (Q1 - 1.5 * IQR)) |(train['price'] > (Q3 + 0.7 * IQR)))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3af257f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:48.702247Z",
     "iopub.status.busy": "2024-06-21T05:59:48.701957Z",
     "iopub.status.idle": "2024-06-21T05:59:49.364279Z",
     "shell.execute_reply": "2024-06-21T05:59:49.363449Z"
    },
    "papermill": {
     "duration": 0.68645,
     "end_time": "2024-06-21T05:59:49.366795",
     "exception": false,
     "start_time": "2024-06-21T05:59:48.680345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import category_encoders as ce\n",
    "\n",
    "def label_encoder(col):\n",
    "    encoder = ce.TargetEncoder(cols=[col])\n",
    "    train[col+'_target'] = encoder.fit_transform(train[col], train['price'])\n",
    "    test[col+'_target'] = encoder.transform(test[col])\n",
    "\n",
    "label_encoder('brand')\n",
    "label_encoder('fuel_type')\n",
    "label_encoder('transmission')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "28b36680",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.412796Z",
     "iopub.status.busy": "2024-06-21T05:59:49.412369Z",
     "iopub.status.idle": "2024-06-21T05:59:49.440200Z",
     "shell.execute_reply": "2024-06-21T05:59:49.439248Z"
    },
    "papermill": {
     "duration": 0.051529,
     "end_time": "2024-06-21T05:59:49.442156",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.390627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 47678 entries, 0 to 54272\n",
      "Data columns (total 13 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   brand                47678 non-null  object \n",
      " 1   milage               47678 non-null  int64  \n",
      " 2   fuel_type            47678 non-null  object \n",
      " 3   transmission         47678 non-null  object \n",
      " 4   accident             47678 non-null  object \n",
      " 5   price                47678 non-null  int64  \n",
      " 6   age                  47678 non-null  int64  \n",
      " 7   power                47678 non-null  float64\n",
      " 8   displacement         47678 non-null  float64\n",
      " 9   cylinders            47678 non-null  float64\n",
      " 10  brand_target         47678 non-null  float64\n",
      " 11  fuel_type_target     47678 non-null  float64\n",
      " 12  transmission_target  47678 non-null  float64\n",
      "dtypes: float64(6), int64(3), object(4)\n",
      "memory usage: 5.1+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d576e5fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.486049Z",
     "iopub.status.busy": "2024-06-21T05:59:49.485576Z",
     "iopub.status.idle": "2024-06-21T05:59:49.493973Z",
     "shell.execute_reply": "2024-06-21T05:59:49.493048Z"
    },
    "papermill": {
     "duration": 0.032592,
     "end_time": "2024-06-21T05:59:49.495876",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.463284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.drop(['brand','fuel_type','transmission'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7d544742",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.539044Z",
     "iopub.status.busy": "2024-06-21T05:59:49.538797Z",
     "iopub.status.idle": "2024-06-21T05:59:49.553360Z",
     "shell.execute_reply": "2024-06-21T05:59:49.552363Z"
    },
    "papermill": {
     "duration": 0.038646,
     "end_time": "2024-06-21T05:59:49.555270",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.516624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 47678 entries, 0 to 54272\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   milage               47678 non-null  int64  \n",
      " 1   accident             47678 non-null  object \n",
      " 2   price                47678 non-null  int64  \n",
      " 3   age                  47678 non-null  int64  \n",
      " 4   power                47678 non-null  float64\n",
      " 5   displacement         47678 non-null  float64\n",
      " 6   cylinders            47678 non-null  float64\n",
      " 7   brand_target         47678 non-null  float64\n",
      " 8   fuel_type_target     47678 non-null  float64\n",
      " 9   transmission_target  47678 non-null  float64\n",
      "dtypes: float64(6), int64(3), object(1)\n",
      "memory usage: 4.0+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "461804fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.598314Z",
     "iopub.status.busy": "2024-06-21T05:59:49.598045Z",
     "iopub.status.idle": "2024-06-21T05:59:49.658141Z",
     "shell.execute_reply": "2024-06-21T05:59:49.657500Z"
    },
    "papermill": {
     "duration": 0.083704,
     "end_time": "2024-06-21T05:59:49.660042",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.576338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For the 'train' DataFrame\n",
    "train['accident'] = train['accident'].apply(lambda x: 1 if x == 'None reported' else 0)\n",
    "\n",
    "# For the 'test' DataFrame\n",
    "test['accident'] = test['accident'].apply(lambda x: 1 if x == 'None reported' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "05a4e5f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.703236Z",
     "iopub.status.busy": "2024-06-21T05:59:49.702959Z",
     "iopub.status.idle": "2024-06-21T05:59:49.709540Z",
     "shell.execute_reply": "2024-06-21T05:59:49.708637Z"
    },
    "papermill": {
     "duration": 0.03043,
     "end_time": "2024-06-21T05:59:49.711635",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.681205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test.drop(['brand','fuel_type','transmission'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2c34d76d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.755551Z",
     "iopub.status.busy": "2024-06-21T05:59:49.755294Z",
     "iopub.status.idle": "2024-06-21T05:59:49.765550Z",
     "shell.execute_reply": "2024-06-21T05:59:49.764517Z"
    },
    "papermill": {
     "duration": 0.034056,
     "end_time": "2024-06-21T05:59:49.767442",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.733386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 36183 entries, 54273 to 90455\n",
      "Data columns (total 9 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   milage               36183 non-null  int64  \n",
      " 1   accident             36183 non-null  int64  \n",
      " 2   age                  36183 non-null  int64  \n",
      " 3   power                36183 non-null  float64\n",
      " 4   displacement         36183 non-null  float64\n",
      " 5   cylinders            36183 non-null  float64\n",
      " 6   brand_target         36183 non-null  float64\n",
      " 7   fuel_type_target     36183 non-null  float64\n",
      " 8   transmission_target  36183 non-null  float64\n",
      "dtypes: float64(6), int64(3)\n",
      "memory usage: 2.8 MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "17e88113",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.811117Z",
     "iopub.status.busy": "2024-06-21T05:59:49.810818Z",
     "iopub.status.idle": "2024-06-21T05:59:49.841738Z",
     "shell.execute_reply": "2024-06-21T05:59:49.840905Z"
    },
    "papermill": {
     "duration": 0.055734,
     "end_time": "2024-06-21T05:59:49.844291",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.788557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>milage</th>\n",
       "      <th>accident</th>\n",
       "      <th>price</th>\n",
       "      <th>age</th>\n",
       "      <th>power</th>\n",
       "      <th>displacement</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>brand_target</th>\n",
       "      <th>fuel_type_target</th>\n",
       "      <th>transmission_target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>milage</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.266457</td>\n",
       "      <td>-0.629178</td>\n",
       "      <td>0.599082</td>\n",
       "      <td>-0.327190</td>\n",
       "      <td>0.031172</td>\n",
       "      <td>-0.005069</td>\n",
       "      <td>-0.230708</td>\n",
       "      <td>-0.089534</td>\n",
       "      <td>-0.420905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accident</th>\n",
       "      <td>-0.266457</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.255982</td>\n",
       "      <td>-0.185636</td>\n",
       "      <td>0.148393</td>\n",
       "      <td>0.035663</td>\n",
       "      <td>0.048993</td>\n",
       "      <td>0.107159</td>\n",
       "      <td>0.032594</td>\n",
       "      <td>0.145947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>-0.629178</td>\n",
       "      <td>0.255982</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.638214</td>\n",
       "      <td>0.500800</td>\n",
       "      <td>0.180737</td>\n",
       "      <td>0.205810</td>\n",
       "      <td>0.308794</td>\n",
       "      <td>0.134757</td>\n",
       "      <td>0.453675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.599082</td>\n",
       "      <td>-0.185636</td>\n",
       "      <td>-0.638214</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.317157</td>\n",
       "      <td>0.052709</td>\n",
       "      <td>0.053076</td>\n",
       "      <td>-0.239260</td>\n",
       "      <td>-0.155823</td>\n",
       "      <td>-0.504260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>power</th>\n",
       "      <td>-0.327190</td>\n",
       "      <td>0.148393</td>\n",
       "      <td>0.500800</td>\n",
       "      <td>-0.317157</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.615664</td>\n",
       "      <td>0.711382</td>\n",
       "      <td>0.396463</td>\n",
       "      <td>0.020954</td>\n",
       "      <td>0.339257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>displacement</th>\n",
       "      <td>0.031172</td>\n",
       "      <td>0.035663</td>\n",
       "      <td>0.180737</td>\n",
       "      <td>0.052709</td>\n",
       "      <td>0.615664</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.869794</td>\n",
       "      <td>0.199804</td>\n",
       "      <td>0.004132</td>\n",
       "      <td>-0.014919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cylinders</th>\n",
       "      <td>-0.005069</td>\n",
       "      <td>0.048993</td>\n",
       "      <td>0.205810</td>\n",
       "      <td>0.053076</td>\n",
       "      <td>0.711382</td>\n",
       "      <td>0.869794</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.257447</td>\n",
       "      <td>-0.044191</td>\n",
       "      <td>0.052075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>brand_target</th>\n",
       "      <td>-0.230708</td>\n",
       "      <td>0.107159</td>\n",
       "      <td>0.308794</td>\n",
       "      <td>-0.239260</td>\n",
       "      <td>0.396463</td>\n",
       "      <td>0.199804</td>\n",
       "      <td>0.257447</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.059797</td>\n",
       "      <td>0.276770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fuel_type_target</th>\n",
       "      <td>-0.089534</td>\n",
       "      <td>0.032594</td>\n",
       "      <td>0.134757</td>\n",
       "      <td>-0.155823</td>\n",
       "      <td>0.020954</td>\n",
       "      <td>0.004132</td>\n",
       "      <td>-0.044191</td>\n",
       "      <td>0.059797</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.066852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>transmission_target</th>\n",
       "      <td>-0.420905</td>\n",
       "      <td>0.145947</td>\n",
       "      <td>0.453675</td>\n",
       "      <td>-0.504260</td>\n",
       "      <td>0.339257</td>\n",
       "      <td>-0.014919</td>\n",
       "      <td>0.052075</td>\n",
       "      <td>0.276770</td>\n",
       "      <td>0.066852</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       milage  accident     price       age     power  \\\n",
       "milage               1.000000 -0.266457 -0.629178  0.599082 -0.327190   \n",
       "accident            -0.266457  1.000000  0.255982 -0.185636  0.148393   \n",
       "price               -0.629178  0.255982  1.000000 -0.638214  0.500800   \n",
       "age                  0.599082 -0.185636 -0.638214  1.000000 -0.317157   \n",
       "power               -0.327190  0.148393  0.500800 -0.317157  1.000000   \n",
       "displacement         0.031172  0.035663  0.180737  0.052709  0.615664   \n",
       "cylinders           -0.005069  0.048993  0.205810  0.053076  0.711382   \n",
       "brand_target        -0.230708  0.107159  0.308794 -0.239260  0.396463   \n",
       "fuel_type_target    -0.089534  0.032594  0.134757 -0.155823  0.020954   \n",
       "transmission_target -0.420905  0.145947  0.453675 -0.504260  0.339257   \n",
       "\n",
       "                     displacement  cylinders  brand_target  fuel_type_target  \\\n",
       "milage                   0.031172  -0.005069     -0.230708         -0.089534   \n",
       "accident                 0.035663   0.048993      0.107159          0.032594   \n",
       "price                    0.180737   0.205810      0.308794          0.134757   \n",
       "age                      0.052709   0.053076     -0.239260         -0.155823   \n",
       "power                    0.615664   0.711382      0.396463          0.020954   \n",
       "displacement             1.000000   0.869794      0.199804          0.004132   \n",
       "cylinders                0.869794   1.000000      0.257447         -0.044191   \n",
       "brand_target             0.199804   0.257447      1.000000          0.059797   \n",
       "fuel_type_target         0.004132  -0.044191      0.059797          1.000000   \n",
       "transmission_target     -0.014919   0.052075      0.276770          0.066852   \n",
       "\n",
       "                     transmission_target  \n",
       "milage                         -0.420905  \n",
       "accident                        0.145947  \n",
       "price                           0.453675  \n",
       "age                            -0.504260  \n",
       "power                           0.339257  \n",
       "displacement                   -0.014919  \n",
       "cylinders                       0.052075  \n",
       "brand_target                    0.276770  \n",
       "fuel_type_target                0.066852  \n",
       "transmission_target             1.000000  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "655d1d66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:49.890612Z",
     "iopub.status.busy": "2024-06-21T05:59:49.890321Z",
     "iopub.status.idle": "2024-06-21T05:59:52.913449Z",
     "shell.execute_reply": "2024-06-21T05:59:52.912551Z"
    },
    "papermill": {
     "duration": 3.048208,
     "end_time": "2024-06-21T05:59:52.915910",
     "exception": false,
     "start_time": "2024-06-21T05:59:49.867702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<Axes: title={'center': 'milage'}>,\n",
       "        <Axes: title={'center': 'accident'}>,\n",
       "        <Axes: title={'center': 'price'}>],\n",
       "       [<Axes: title={'center': 'age'}>,\n",
       "        <Axes: title={'center': 'power'}>,\n",
       "        <Axes: title={'center': 'displacement'}>],\n",
       "       [<Axes: title={'center': 'cylinders'}>,\n",
       "        <Axes: title={'center': 'brand_target'}>,\n",
       "        <Axes: title={'center': 'fuel_type_target'}>],\n",
       "       [<Axes: title={'center': 'transmission_target'}>, <Axes: >,\n",
       "        <Axes: >]], dtype=object)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1500 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train.hist(bins=50, figsize=(20,15))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "baad6504",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:52.966161Z",
     "iopub.status.busy": "2024-06-21T05:59:52.965545Z",
     "iopub.status.idle": "2024-06-21T05:59:53.291239Z",
     "shell.execute_reply": "2024-06-21T05:59:53.290317Z"
    },
    "papermill": {
     "duration": 0.353267,
     "end_time": "2024-06-21T05:59:53.293249",
     "exception": false,
     "start_time": "2024-06-21T05:59:52.939982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a strip plot for the 'price' variable\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.stripplot(data=train, y='price', jitter=True, color='purple', alpha=0.5)\n",
    "plt.title('Strip Plot: Price Distribution')\n",
    "plt.ylabel('Price')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "8d270172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:53.346871Z",
     "iopub.status.busy": "2024-06-21T05:59:53.346212Z",
     "iopub.status.idle": "2024-06-21T05:59:53.371553Z",
     "shell.execute_reply": "2024-06-21T05:59:53.370655Z"
    },
    "papermill": {
     "duration": 0.054377,
     "end_time": "2024-06-21T05:59:53.373498",
     "exception": false,
     "start_time": "2024-06-21T05:59:53.319121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>milage</th>\n",
       "      <th>accident</th>\n",
       "      <th>age</th>\n",
       "      <th>power</th>\n",
       "      <th>displacement</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>brand_target</th>\n",
       "      <th>fuel_type_target</th>\n",
       "      <th>transmission_target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>milage</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.294878</td>\n",
       "      <td>0.626519</td>\n",
       "      <td>-0.396764</td>\n",
       "      <td>-0.031818</td>\n",
       "      <td>-0.072038</td>\n",
       "      <td>-0.276124</td>\n",
       "      <td>-0.117123</td>\n",
       "      <td>-0.446687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accident</th>\n",
       "      <td>-0.294878</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.216510</td>\n",
       "      <td>0.181372</td>\n",
       "      <td>0.049004</td>\n",
       "      <td>0.066962</td>\n",
       "      <td>0.128337</td>\n",
       "      <td>0.044452</td>\n",
       "      <td>0.173060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.626519</td>\n",
       "      <td>-0.216510</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.368345</td>\n",
       "      <td>0.002140</td>\n",
       "      <td>0.001774</td>\n",
       "      <td>-0.267006</td>\n",
       "      <td>-0.170814</td>\n",
       "      <td>-0.520140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>power</th>\n",
       "      <td>-0.396764</td>\n",
       "      <td>0.181372</td>\n",
       "      <td>-0.368345</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.594453</td>\n",
       "      <td>0.705987</td>\n",
       "      <td>0.407911</td>\n",
       "      <td>0.036213</td>\n",
       "      <td>0.364178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>displacement</th>\n",
       "      <td>-0.031818</td>\n",
       "      <td>0.049004</td>\n",
       "      <td>0.002140</td>\n",
       "      <td>0.594453</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.856779</td>\n",
       "      <td>0.207675</td>\n",
       "      <td>-0.000220</td>\n",
       "      <td>0.031390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cylinders</th>\n",
       "      <td>-0.072038</td>\n",
       "      <td>0.066962</td>\n",
       "      <td>0.001774</td>\n",
       "      <td>0.705987</td>\n",
       "      <td>0.856779</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.277328</td>\n",
       "      <td>-0.043994</td>\n",
       "      <td>0.082610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>brand_target</th>\n",
       "      <td>-0.276124</td>\n",
       "      <td>0.128337</td>\n",
       "      <td>-0.267006</td>\n",
       "      <td>0.407911</td>\n",
       "      <td>0.207675</td>\n",
       "      <td>0.277328</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.067273</td>\n",
       "      <td>0.285502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fuel_type_target</th>\n",
       "      <td>-0.117123</td>\n",
       "      <td>0.044452</td>\n",
       "      <td>-0.170814</td>\n",
       "      <td>0.036213</td>\n",
       "      <td>-0.000220</td>\n",
       "      <td>-0.043994</td>\n",
       "      <td>0.067273</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.087481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>transmission_target</th>\n",
       "      <td>-0.446687</td>\n",
       "      <td>0.173060</td>\n",
       "      <td>-0.520140</td>\n",
       "      <td>0.364178</td>\n",
       "      <td>0.031390</td>\n",
       "      <td>0.082610</td>\n",
       "      <td>0.285502</td>\n",
       "      <td>0.087481</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       milage  accident       age     power  displacement  \\\n",
       "milage               1.000000 -0.294878  0.626519 -0.396764     -0.031818   \n",
       "accident            -0.294878  1.000000 -0.216510  0.181372      0.049004   \n",
       "age                  0.626519 -0.216510  1.000000 -0.368345      0.002140   \n",
       "power               -0.396764  0.181372 -0.368345  1.000000      0.594453   \n",
       "displacement        -0.031818  0.049004  0.002140  0.594453      1.000000   \n",
       "cylinders           -0.072038  0.066962  0.001774  0.705987      0.856779   \n",
       "brand_target        -0.276124  0.128337 -0.267006  0.407911      0.207675   \n",
       "fuel_type_target    -0.117123  0.044452 -0.170814  0.036213     -0.000220   \n",
       "transmission_target -0.446687  0.173060 -0.520140  0.364178      0.031390   \n",
       "\n",
       "                     cylinders  brand_target  fuel_type_target  \\\n",
       "milage               -0.072038     -0.276124         -0.117123   \n",
       "accident              0.066962      0.128337          0.044452   \n",
       "age                   0.001774     -0.267006         -0.170814   \n",
       "power                 0.705987      0.407911          0.036213   \n",
       "displacement          0.856779      0.207675         -0.000220   \n",
       "cylinders             1.000000      0.277328         -0.043994   \n",
       "brand_target          0.277328      1.000000          0.067273   \n",
       "fuel_type_target     -0.043994      0.067273          1.000000   \n",
       "transmission_target   0.082610      0.285502          0.087481   \n",
       "\n",
       "                     transmission_target  \n",
       "milage                         -0.446687  \n",
       "accident                        0.173060  \n",
       "age                            -0.520140  \n",
       "power                           0.364178  \n",
       "displacement                    0.031390  \n",
       "cylinders                       0.082610  \n",
       "brand_target                    0.285502  \n",
       "fuel_type_target                0.087481  \n",
       "transmission_target             1.000000  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d78730fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:53.424922Z",
     "iopub.status.busy": "2024-06-21T05:59:53.424619Z",
     "iopub.status.idle": "2024-06-21T05:59:53.472257Z",
     "shell.execute_reply": "2024-06-21T05:59:53.471170Z"
    },
    "papermill": {
     "duration": 0.075834,
     "end_time": "2024-06-21T05:59:53.474430",
     "exception": false,
     "start_time": "2024-06-21T05:59:53.398596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Quartile  Count\n",
      "0   Q3 (75%)  12028\n",
      "1   Q2 (50%)  11978\n",
      "2  Q4 (100%)  11920\n",
      "3   Q1 (25%)  11752\n"
     ]
    }
   ],
   "source": [
    "def quart(df):\n",
    "    # Calculate quartiles\n",
    "    Q1 = df['price'].quantile(0.25)\n",
    "    Q2 = df['price'].median()\n",
    "    Q3 = df['price'].quantile(0.75)\n",
    "\n",
    "    # Define a function to categorize data points into quartiles\n",
    "    def categorize_quartile(value):\n",
    "        if value < Q1:\n",
    "            return \"Q1 (25%)\"\n",
    "        elif value < Q2:\n",
    "            return \"Q2 (50%)\"\n",
    "        elif value < Q3:\n",
    "            return \"Q3 (75%)\"\n",
    "        else:\n",
    "            return \"Q4 (100%)\"\n",
    "        \n",
    "    # Apply the categorize_quartile function to the 'price' column\n",
    "    df['Quartile'] = df['price'].apply(categorize_quartile)\n",
    "\n",
    "    # Count the number of data points in each quartile\n",
    "    quartile_counts = df['Quartile'].value_counts().reset_index()\n",
    "    quartile_counts.columns = ['Quartile', 'Count']\n",
    "\n",
    "    # Display the quartile distribution table\n",
    "    print(quartile_counts)\n",
    "\n",
    "\n",
    "quart(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3ac1dfdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:53.526926Z",
     "iopub.status.busy": "2024-06-21T05:59:53.526337Z",
     "iopub.status.idle": "2024-06-21T05:59:53.572860Z",
     "shell.execute_reply": "2024-06-21T05:59:53.571966Z"
    },
    "papermill": {
     "duration": 0.074078,
     "end_time": "2024-06-21T05:59:53.574657",
     "exception": false,
     "start_time": "2024-06-21T05:59:53.500579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>milage</th>\n",
       "      <th>accident</th>\n",
       "      <th>price</th>\n",
       "      <th>age</th>\n",
       "      <th>power</th>\n",
       "      <th>displacement</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>brand_target</th>\n",
       "      <th>fuel_type_target</th>\n",
       "      <th>transmission_target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "      <td>47678.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>79017.969504</td>\n",
       "      <td>0.710349</td>\n",
       "      <td>26943.079219</td>\n",
       "      <td>9.496183</td>\n",
       "      <td>318.030682</td>\n",
       "      <td>3.649098</td>\n",
       "      <td>6.188238</td>\n",
       "      <td>26937.466158</td>\n",
       "      <td>26943.079171</td>\n",
       "      <td>26928.699312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>49418.154681</td>\n",
       "      <td>0.453605</td>\n",
       "      <td>15404.132778</td>\n",
       "      <td>5.512482</td>\n",
       "      <td>95.406901</td>\n",
       "      <td>1.314001</td>\n",
       "      <td>1.463770</td>\n",
       "      <td>4729.893900</td>\n",
       "      <td>2075.807919</td>\n",
       "      <td>6976.123022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>0.650000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>11511.616582</td>\n",
       "      <td>17731.600000</td>\n",
       "      <td>11681.765900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>42653.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14500.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>252.000000</td>\n",
       "      <td>2.700000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>24525.448845</td>\n",
       "      <td>26727.332745</td>\n",
       "      <td>22179.077309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>72329.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>24900.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>310.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>29186.471925</td>\n",
       "      <td>26727.332745</td>\n",
       "      <td>22442.515973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>108000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>37475.500000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>375.000000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>29635.891644</td>\n",
       "      <td>26727.332745</td>\n",
       "      <td>31183.413245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>405000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>65500.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>1020.000000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>45614.362790</td>\n",
       "      <td>35194.921260</td>\n",
       "      <td>45198.192624</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              milage      accident         price           age         power  \\\n",
       "count   47678.000000  47678.000000  47678.000000  47678.000000  47678.000000   \n",
       "mean    79017.969504      0.710349  26943.079219      9.496183    318.030682   \n",
       "std     49418.154681      0.453605  15404.132778      5.512482     95.406901   \n",
       "min       100.000000      0.000000   2000.000000      0.000000     76.000000   \n",
       "25%     42653.000000      0.000000  14500.000000      5.000000    252.000000   \n",
       "50%     72329.000000      1.000000  24900.000000      8.000000    310.000000   \n",
       "75%    108000.000000      1.000000  37475.500000     13.000000    375.000000   \n",
       "max    405000.000000      1.000000  65500.000000     50.000000   1020.000000   \n",
       "\n",
       "       displacement     cylinders  brand_target  fuel_type_target  \\\n",
       "count  47678.000000  47678.000000  47678.000000      47678.000000   \n",
       "mean       3.649098      6.188238  26937.466158      26943.079171   \n",
       "std        1.314001      1.463770   4729.893900       2075.807919   \n",
       "min        0.650000      3.000000  11511.616582      17731.600000   \n",
       "25%        2.700000      6.000000  24525.448845      26727.332745   \n",
       "50%        3.500000      6.000000  29186.471925      26727.332745   \n",
       "75%        4.400000      8.000000  29635.891644      26727.332745   \n",
       "max        8.400000     12.000000  45614.362790      35194.921260   \n",
       "\n",
       "       transmission_target  \n",
       "count         47678.000000  \n",
       "mean          26928.699312  \n",
       "std            6976.123022  \n",
       "min           11681.765900  \n",
       "25%           22179.077309  \n",
       "50%           22442.515973  \n",
       "75%           31183.413245  \n",
       "max           45198.192624  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "92668c9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:53.625294Z",
     "iopub.status.busy": "2024-06-21T05:59:53.625029Z",
     "iopub.status.idle": "2024-06-21T05:59:53.711965Z",
     "shell.execute_reply": "2024-06-21T05:59:53.711037Z"
    },
    "papermill": {
     "duration": 0.114577,
     "end_time": "2024-06-21T05:59:53.713992",
     "exception": false,
     "start_time": "2024-06-21T05:59:53.599415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import make_scorer, mean_squared_error\n",
    "\n",
    "def rmse(y_true, y_pred):\n",
    "    return np.sqrt(mean_squared_error(y_true, y_pred))\n",
    "\n",
    "rmse_scorer = make_scorer(rmse, greater_is_better=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ae65537d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:53.765358Z",
     "iopub.status.busy": "2024-06-21T05:59:53.765096Z",
     "iopub.status.idle": "2024-06-21T05:59:53.850447Z",
     "shell.execute_reply": "2024-06-21T05:59:53.849788Z"
    },
    "papermill": {
     "duration": 0.113518,
     "end_time": "2024-06-21T05:59:53.852452",
     "exception": false,
     "start_time": "2024-06-21T05:59:53.738934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#train a linear regression model with cross validation\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "X = train.drop(['price','Quartile'], axis=1)\n",
    "y = train['price']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "58257c07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:53.903974Z",
     "iopub.status.busy": "2024-06-21T05:59:53.903427Z",
     "iopub.status.idle": "2024-06-21T05:59:54.067046Z",
     "shell.execute_reply": "2024-06-21T05:59:54.065828Z"
    },
    "papermill": {
     "duration": 0.192407,
     "end_time": "2024-06-21T05:59:54.070247",
     "exception": false,
     "start_time": "2024-06-21T05:59:53.877840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 9932.056829558513\n"
     ]
    }
   ],
   "source": [
    "# Create a linear regression model\n",
    "model = LinearRegression()\n",
    "\n",
    "# Perform cross-validation\n",
    "scores = cross_val_score(model, X, y, cv=5, scoring=rmse_scorer)\n",
    "\n",
    "# Print the mean error score\n",
    "print('Mean Absolute Error:', np.mean(-scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "678ef5fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:54.212658Z",
     "iopub.status.busy": "2024-06-21T05:59:54.212365Z",
     "iopub.status.idle": "2024-06-21T05:59:54.218472Z",
     "shell.execute_reply": "2024-06-21T05:59:54.217601Z"
    },
    "papermill": {
     "duration": 0.050206,
     "end_time": "2024-06-21T05:59:54.220387",
     "exception": false,
     "start_time": "2024-06-21T05:59:54.170181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Price: 26943.079218926967\n",
      "Standard Deviation of Price: 15404.132777547295\n"
     ]
    }
   ],
   "source": [
    "mean_price = train['price'].mean()\n",
    "std_price = train['price'].std()\n",
    "\n",
    "print(f'Mean Price: {mean_price}')\n",
    "print(f'Standard Deviation of Price: {std_price}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "396e6892",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:54.271269Z",
     "iopub.status.busy": "2024-06-21T05:59:54.270990Z",
     "iopub.status.idle": "2024-06-21T05:59:54.301353Z",
     "shell.execute_reply": "2024-06-21T05:59:54.300287Z"
    },
    "papermill": {
     "duration": 0.058044,
     "end_time": "2024-06-21T05:59:54.303351",
     "exception": false,
     "start_time": "2024-06-21T05:59:54.245307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline RMSE: 15404.223483650905\n"
     ]
    }
   ],
   "source": [
    "from sklearn.dummy import DummyRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import make_scorer, mean_squared_error\n",
    "\n",
    "def rmse(y_true, y_pred):\n",
    "    return np.sqrt(mean_squared_error(y_true, y_pred))\n",
    "\n",
    "rmse_scorer = make_scorer(rmse, greater_is_better=False)\n",
    "\n",
    "dummy_model = DummyRegressor(strategy='mean')\n",
    "baseline_scores = cross_val_score(dummy_model, X, y, cv=5, scoring=rmse_scorer)\n",
    "baseline_rmse = -baseline_scores.mean()\n",
    "\n",
    "print(f'Baseline RMSE: {baseline_rmse}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "af2f7667",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:54.356967Z",
     "iopub.status.busy": "2024-06-21T05:59:54.356298Z",
     "iopub.status.idle": "2024-06-21T05:59:54.685406Z",
     "shell.execute_reply": "2024-06-21T05:59:54.684513Z"
    },
    "papermill": {
     "duration": 0.357193,
     "end_time": "2024-06-21T05:59:54.687378",
     "exception": false,
     "start_time": "2024-06-21T05:59:54.330185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Fit the model and get predictions\n",
    "model.fit(X, y)\n",
    "predictions = model.predict(X)\n",
    "\n",
    "# Calculate errors\n",
    "errors = predictions - y\n",
    "\n",
    "# Plot error distribution\n",
    "plt.hist(errors, bins=50)\n",
    "plt.xlabel('Prediction Error')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Prediction Errors')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3f31dd51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T05:59:54.739993Z",
     "iopub.status.busy": "2024-06-21T05:59:54.739692Z",
     "iopub.status.idle": "2024-06-21T06:00:47.339868Z",
     "shell.execute_reply": "2024-06-21T06:00:47.338833Z"
    },
    "papermill": {
     "duration": 52.655269,
     "end_time": "2024-06-21T06:00:47.368556",
     "exception": false,
     "start_time": "2024-06-21T05:59:54.713287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Random Forest RMSE: 9034.420063875155\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define the model\n",
    "rf_model = RandomForestRegressor(random_state=1)\n",
    "\n",
    "# Define the hyperparameters to tune\n",
    "param_grid = {\n",
    "    'n_estimators': [100],\n",
    "    'max_depth': [10],\n",
    "    'min_samples_split': [10],\n",
    "    'min_samples_leaf': [4],\n",
    "    \n",
    "}\n",
    "\n",
    "# Set up grid search\n",
    "grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring=rmse_scorer, n_jobs=-1)\n",
    "\n",
    "# Fit the grid search to the data\n",
    "grid_search.fit(X, y)\n",
    "\n",
    "# Get the best model from grid search\n",
    "best_rf_model = grid_search.best_estimator_\n",
    "\n",
    "# Evaluate the best model\n",
    "best_rf_scores = cross_val_score(best_rf_model, X, y, cv=5, scoring=rmse_scorer)\n",
    "best_rf_rmse = -best_rf_scores.mean()\n",
    "\n",
    "print(f'Best Random Forest RMSE: {best_rf_rmse}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efa8ccf9",
   "metadata": {
    "papermill": {
     "duration": 0.025244,
     "end_time": "2024-06-21T06:00:47.419536",
     "exception": false,
     "start_time": "2024-06-21T06:00:47.394292",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c3b1cac9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T06:00:47.472770Z",
     "iopub.status.busy": "2024-06-21T06:00:47.472413Z",
     "iopub.status.idle": "2024-06-21T06:00:47.792527Z",
     "shell.execute_reply": "2024-06-21T06:00:47.791605Z"
    },
    "papermill": {
     "duration": 0.349753,
     "end_time": "2024-06-21T06:00:47.794896",
     "exception": false,
     "start_time": "2024-06-21T06:00:47.445143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#predict the test data in dataframe\n",
    "test_predictions = best_rf_model.predict(test)\n",
    "\n",
    "# Create a DataFrame for the predictions\n",
    "submission = pd.DataFrame({'id': test.index, 'price': test_predictions})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "213b0ee3",
   "metadata": {
    "papermill": {
     "duration": 0.025022,
     "end_time": "2024-06-21T06:00:47.845787",
     "exception": false,
     "start_time": "2024-06-21T06:00:47.820765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "994930a6",
   "metadata": {
    "papermill": {
     "duration": 0.02511,
     "end_time": "2024-06-21T06:00:47.895915",
     "exception": false,
     "start_time": "2024-06-21T06:00:47.870805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1592eade",
   "metadata": {
    "papermill": {
     "duration": 0.024949,
     "end_time": "2024-06-21T06:00:47.946398",
     "exception": false,
     "start_time": "2024-06-21T06:00:47.921449",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9261.883977359048\n",
    "\n",
    "9103.966453415353  100 , 10 , 5 , 4\n",
    "\n",
    "9034.420063875155 100 , 10 , 10 , 4\n",
    "\n",
    "9040.667450035258 100 , 10 , 10 , 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d5fec5a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T06:00:47.998612Z",
     "iopub.status.busy": "2024-06-21T06:00:47.998000Z",
     "iopub.status.idle": "2024-06-21T06:01:13.386558Z",
     "shell.execute_reply": "2024-06-21T06:01:13.385465Z"
    },
    "papermill": {
     "duration": 25.417206,
     "end_time": "2024-06-21T06:01:13.388655",
     "exception": false,
     "start_time": "2024-06-21T06:00:47.971449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xgboost in /opt/conda/lib/python3.10/site-packages (2.0.3)\r\n",
      "Collecting xgboost\r\n",
      "  Downloading xgboost-2.1.0-py3-none-manylinux_2_28_x86_64.whl.metadata (2.1 kB)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from xgboost) (1.26.4)\r\n",
      "Collecting nvidia-nccl-cu12 (from xgboost)\r\n",
      "  Downloading nvidia_nccl_cu12-2.22.3-py3-none-manylinux2014_x86_64.whl.metadata (1.8 kB)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from xgboost) (1.11.4)\r\n",
      "Downloading xgboost-2.1.0-py3-none-manylinux_2_28_x86_64.whl (153.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m153.9/153.9 MB\u001b[0m \u001b[31m10.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading nvidia_nccl_cu12-2.22.3-py3-none-manylinux2014_x86_64.whl (190.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.9/190.9 MB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: nvidia-nccl-cu12, xgboost\r\n",
      "  Attempting uninstall: xgboost\r\n",
      "    Found existing installation: xgboost 2.0.3\r\n",
      "    Uninstalling xgboost-2.0.3:\r\n",
      "      Successfully uninstalled xgboost-2.0.3\r\n",
      "Successfully installed nvidia-nccl-cu12-2.22.3 xgboost-2.1.0\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install xgboost --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "7d00d923",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T06:01:13.456972Z",
     "iopub.status.busy": "2024-06-21T06:01:13.456616Z",
     "iopub.status.idle": "2024-06-21T06:18:26.221368Z",
     "shell.execute_reply": "2024-06-21T06:18:26.220215Z"
    },
    "papermill": {
     "duration": 1032.827374,
     "end_time": "2024-06-21T06:18:26.249788",
     "exception": false,
     "start_time": "2024-06-21T06:01:13.422414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:158: UserWarning: [06:01:16] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\n",
      "Potential solutions:\n",
      "- Use a data structure that matches the device ordinal in the booster.\n",
      "- Set the device for booster before call to inplace_predict.\n",
      "\n",
      "This warning will only be shown once.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:158: UserWarning: [06:01:16] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\n",
      "Potential solutions:\n",
      "- Use a data structure that matches the device ordinal in the booster.\n",
      "- Set the device for booster before call to inplace_predict.\n",
      "\n",
      "This warning will only be shown once.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:158: UserWarning: [06:01:16] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\n",
      "Potential solutions:\n",
      "- Use a data structure that matches the device ordinal in the booster.\n",
      "- Set the device for booster before call to inplace_predict.\n",
      "\n",
      "This warning will only be shown once.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:158: UserWarning: [06:01:16] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\n",
      "Potential solutions:\n",
      "- Use a data structure that matches the device ordinal in the booster.\n",
      "- Set the device for booster before call to inplace_predict.\n",
      "\n",
      "This warning will only be shown once.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/xgboost/core.py:158: UserWarning: [06:05:25] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\n",
      "Potential solutions:\n",
      "- Use a data structure that matches the device ordinal in the booster.\n",
      "- Set the device for booster before call to inplace_predict.\n",
      "\n",
      "This warning will only be shown once.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'colsample_bytree': 0.8, 'gamma': 0, 'learning_rate': 0.1, 'max_depth': 5, 'n_estimators': 300, 'subsample': 1.0}\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import cupy as cp  # Import CuPy for GPU array support\n",
    "\n",
    "# Move data to GPU\n",
    "#X_gpu = cp.array(X)\n",
    "#y_gpu = cp.array(y)\n",
    "\n",
    "# Define the model with GPU support\n",
    "model = xgb.XGBRegressor(random_state=1, device = \"cuda\")\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'learning_rate': [0.01, 0.1, 0.3],\n",
    "    'max_depth': [3, 5, 7],\n",
    "    'subsample': [0.8, 1.0],\n",
    "    'colsample_bytree': [0.8, 1.0],\n",
    "    'gamma': [0, 0.1, 0.3]\n",
    "}\n",
    "\n",
    "# Set up grid search\n",
    "grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n",
    "\n",
    "# Fit the grid search to the data on GPU\n",
    "grid_search.fit(X, y)\n",
    "\n",
    "# Get the best parameters and best model\n",
    "best_params = grid_search.best_params_\n",
    "best_model = grid_search.best_estimator_\n",
    "print(f'Best Parameters: {best_params}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9a318b72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T06:18:26.322036Z",
     "iopub.status.busy": "2024-06-21T06:18:26.321361Z",
     "iopub.status.idle": "2024-06-21T06:18:32.187915Z",
     "shell.execute_reply": "2024-06-21T06:18:32.186920Z"
    },
    "papermill": {
     "duration": 5.906099,
     "end_time": "2024-06-21T06:18:32.189898",
     "exception": false,
     "start_time": "2024-06-21T06:18:26.283799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Random Forest RMSE: 9352.786263074006\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "# Define the model\n",
    "rf_model = DecisionTreeRegressor(random_state=1)\n",
    "\n",
    "# Define the hyperparameters to tune\n",
    "param_grid = {\"splitter\":[\"best\",\"random\"],\n",
    "            \"max_depth\" : [1,5,7,10],\n",
    "           \"min_samples_leaf\":[1,5,7,10],\n",
    "           \"max_features\":[2,4,None],}\n",
    "\n",
    "# Set up grid search\n",
    "grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring=rmse_scorer, n_jobs=-1)\n",
    "\n",
    "# Fit the grid search to the data\n",
    "grid_search.fit(X, y)\n",
    "\n",
    "# Get the best model from grid search\n",
    "best_rf_model = grid_search.best_estimator_\n",
    "\n",
    "# Evaluate the best model\n",
    "best_rf_scores = cross_val_score(best_rf_model, X, y, cv=5, scoring=rmse_scorer)\n",
    "best_rf_rmse = -best_rf_scores.mean()\n",
    "\n",
    "print(f'Best Random Forest RMSE: {best_rf_rmse}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aed1708a",
   "metadata": {
    "papermill": {
     "duration": 0.032968,
     "end_time": "2024-06-21T06:18:32.256611",
     "exception": false,
     "start_time": "2024-06-21T06:18:32.223643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5223056,
     "sourceId": 8707361,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30734,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1136.778558,
   "end_time": "2024-06-21T06:18:34.910816",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-21T05:59:38.132258",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
